"""autogenerated by genpy from auv_msgs/PlanVehicleSearchPathRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PlanVehicleSearchPathRequest(genpy.Message):
  _md5sum = "a35aefb191d9deb40033668383f7e750"
  _type = "auv_msgs/PlanVehicleSearchPathRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

bool depth_mode

float32 altitude
float32 depth

float32 start_north
float32 start_east
float32 end_north
float32 end_east
float32 max_bottom_gradient




"""
  __slots__ = ['depth_mode','altitude','depth','start_north','start_east','end_north','end_east','max_bottom_gradient']
  _slot_types = ['bool','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       depth_mode,altitude,depth,start_north,start_east,end_north,end_east,max_bottom_gradient

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanVehicleSearchPathRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.depth_mode is None:
        self.depth_mode = False
      if self.altitude is None:
        self.altitude = 0.
      if self.depth is None:
        self.depth = 0.
      if self.start_north is None:
        self.start_north = 0.
      if self.start_east is None:
        self.start_east = 0.
      if self.end_north is None:
        self.end_north = 0.
      if self.end_east is None:
        self.end_east = 0.
      if self.max_bottom_gradient is None:
        self.max_bottom_gradient = 0.
    else:
      self.depth_mode = False
      self.altitude = 0.
      self.depth = 0.
      self.start_north = 0.
      self.start_east = 0.
      self.end_north = 0.
      self.end_east = 0.
      self.max_bottom_gradient = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B7f.pack(_x.depth_mode, _x.altitude, _x.depth, _x.start_north, _x.start_east, _x.end_north, _x.end_east, _x.max_bottom_gradient))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.depth_mode, _x.altitude, _x.depth, _x.start_north, _x.start_east, _x.end_north, _x.end_east, _x.max_bottom_gradient,) = _struct_B7f.unpack(str[start:end])
      self.depth_mode = bool(self.depth_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B7f.pack(_x.depth_mode, _x.altitude, _x.depth, _x.start_north, _x.start_east, _x.end_north, _x.end_east, _x.max_bottom_gradient))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.depth_mode, _x.altitude, _x.depth, _x.start_north, _x.start_east, _x.end_north, _x.end_east, _x.max_bottom_gradient,) = _struct_B7f.unpack(str[start:end])
      self.depth_mode = bool(self.depth_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B7f = struct.Struct("<B7f")
"""autogenerated by genpy from auv_msgs/PlanVehicleSearchPathResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auv_msgs.msg

class PlanVehicleSearchPathResponse(genpy.Message):
  _md5sum = "a49f66d103bc0d426a45032f4254908b"
  _type = "auv_msgs/PlanVehicleSearchPathResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool success
int32 error_num
int32 ERROR_MISSING_BATHYMETRY = 1
int32 ERROR_OTHER = -1


VehiclePose[] pose





bool[] altitude_mode


================================================================================
MSG: auv_msgs/VehiclePose
# Position and orientation of the vehicle. 

NED position
RPY orientation

================================================================================
MSG: auv_msgs/NED
# Position or velocity in the right-handed NED coordinate frame.

# metres north, positive towards true north.
float64 north

# metres east, positive towards true east.
float64 east

# metres down, positive towards the centre of the earth.
float64 depth

================================================================================
MSG: auv_msgs/RPY
# Orientation or orientation velocity in a frame consistent with the right-handed NED coordinate frame.

# Fixed-axis roll, in radians. Positive clockwise rotation about the X axis, looking forward.
float32 roll

# Fixed-axis pitch, in radians. Positive upwards rotation of the vehicle nose about the Y axis.
float32 pitch

# Fixed-axis yaw, in radians. Positive clockwise rotation about the Z axis, looking down.
float32 yaw

"""
  # Pseudo-constants
  ERROR_MISSING_BATHYMETRY = 1
  ERROR_OTHER = -1

  __slots__ = ['success','error_num','pose','altitude_mode']
  _slot_types = ['bool','int32','auv_msgs/VehiclePose[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,error_num,pose,altitude_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanVehicleSearchPathResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.error_num is None:
        self.error_num = 0
      if self.pose is None:
        self.pose = []
      if self.altitude_mode is None:
        self.altitude_mode = []
    else:
      self.success = False
      self.error_num = 0
      self.pose = []
      self.altitude_mode = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Bi.pack(_x.success, _x.error_num))
      length = len(self.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose:
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.north, _x.east, _x.depth))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_struct_3f.pack(_x.roll, _x.pitch, _x.yaw))
      length = len(self.altitude_mode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.altitude_mode))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose is None:
        self.pose = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.success, _x.error_num,) = _struct_Bi.unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose = []
      for i in range(0, length):
        val1 = auv_msgs.msg.VehiclePose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.north, _x.east, _x.depth,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 12
        (_x.roll, _x.pitch, _x.yaw,) = _struct_3f.unpack(str[start:end])
        self.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.altitude_mode = struct.unpack(pattern, str[start:end])
      self.altitude_mode = map(bool, self.altitude_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Bi.pack(_x.success, _x.error_num))
      length = len(self.pose)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose:
        _v5 = val1.position
        _x = _v5
        buff.write(_struct_3d.pack(_x.north, _x.east, _x.depth))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_struct_3f.pack(_x.roll, _x.pitch, _x.yaw))
      length = len(self.altitude_mode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.altitude_mode.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose is None:
        self.pose = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.success, _x.error_num,) = _struct_Bi.unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose = []
      for i in range(0, length):
        val1 = auv_msgs.msg.VehiclePose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.north, _x.east, _x.depth,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 12
        (_x.roll, _x.pitch, _x.yaw,) = _struct_3f.unpack(str[start:end])
        self.pose.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.altitude_mode = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.altitude_mode = map(bool, self.altitude_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
_struct_Bi = struct.Struct("<Bi")
_struct_3d = struct.Struct("<3d")
class PlanVehicleSearchPath(object):
  _type          = 'auv_msgs/PlanVehicleSearchPath'
  _md5sum = '28b40ee493b99da239fe762d65f76ab9'
  _request_class  = PlanVehicleSearchPathRequest
  _response_class = PlanVehicleSearchPathResponse
