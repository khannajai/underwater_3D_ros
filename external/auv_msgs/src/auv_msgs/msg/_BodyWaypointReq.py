"""autogenerated by genpy from auv_msgs/BodyWaypointReq.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auv_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class BodyWaypointReq(genpy.Message):
  _md5sum = "4fcf6c9a4c8c53b08d65c916cf62fb03"
  _type = "auv_msgs/BodyWaypointReq"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Body frame (relative) waypoint request to pilot.
# A new waypoint request should contain a different goal.id
# (incremented) from previous requests. This same message should then
# be re-sent at 5-10 Hz. The pilot should attempt to position hold at
# the world pose at the time the new goal.{requestor, id} is received.

Header header

# Common waypoint details
GoalDescriptor goal

# If true, maintain Z position relative to altitude, otherwise depth.
bool altitude_mode

# Body pose change relative to vehicle world pose at the time the waypoint
# is first received (with a unique requesting_node and goal_id).
geometry_msgs/Vector3 position
RPY orientation

# Axes of control to disable, in body frame.
Bool6Axis disable_axis

# Tolerances are in body frame, zero indicates pilot default should be used.
geometry_msgs/Vector3 position_tolerance
RPY orientation_tolerance

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: auv_msgs/GoalDescriptor
# Contains values common to all waypoint request and status messages.
# Waypoint goals with higher priority trump lower priority goals. For
# goals of the same priority, the pilot should follow the latest
# received.

# Name of the requesting node, used with id to identify the request.
string requester

# Goal ID for the request
uint32 id

uint32 priority
uint32 PRIORITY_LOW = 0
uint32 PRIORITY_NORMAL = 10
uint32 PRIORITY_AVOID_OBSTACLE = 20
uint32 PRIORITY_EMERGENCY = 30
uint32 PRIORITY_MANUAL_OVERRIDE  = 40

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: auv_msgs/RPY
# Orientation or orientation velocity in a frame consistent with the right-handed NED coordinate frame.

# Fixed-axis roll, in radians. Positive clockwise rotation about the X axis, looking forward.
float32 roll

# Fixed-axis pitch, in radians. Positive upwards rotation of the vehicle nose about the Y axis.
float32 pitch

# Fixed-axis yaw, in radians. Positive clockwise rotation about the Z axis, looking down.
float32 yaw

================================================================================
MSG: auv_msgs/Bool6Axis
bool x
bool y
bool z
bool roll
bool pitch
bool yaw

"""
  __slots__ = ['header','goal','altitude_mode','position','orientation','disable_axis','position_tolerance','orientation_tolerance']
  _slot_types = ['std_msgs/Header','auv_msgs/GoalDescriptor','bool','geometry_msgs/Vector3','auv_msgs/RPY','auv_msgs/Bool6Axis','geometry_msgs/Vector3','auv_msgs/RPY']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goal,altitude_mode,position,orientation,disable_axis,position_tolerance,orientation_tolerance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BodyWaypointReq, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal is None:
        self.goal = auv_msgs.msg.GoalDescriptor()
      if self.altitude_mode is None:
        self.altitude_mode = False
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.orientation is None:
        self.orientation = auv_msgs.msg.RPY()
      if self.disable_axis is None:
        self.disable_axis = auv_msgs.msg.Bool6Axis()
      if self.position_tolerance is None:
        self.position_tolerance = geometry_msgs.msg.Vector3()
      if self.orientation_tolerance is None:
        self.orientation_tolerance = auv_msgs.msg.RPY()
    else:
      self.header = std_msgs.msg.Header()
      self.goal = auv_msgs.msg.GoalDescriptor()
      self.altitude_mode = False
      self.position = geometry_msgs.msg.Vector3()
      self.orientation = auv_msgs.msg.RPY()
      self.disable_axis = auv_msgs.msg.Bool6Axis()
      self.position_tolerance = geometry_msgs.msg.Vector3()
      self.orientation_tolerance = auv_msgs.msg.RPY()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.requester
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2IB3d3f6B3d3f.pack(_x.goal.id, _x.goal.priority, _x.altitude_mode, _x.position.x, _x.position.y, _x.position.z, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.disable_axis.x, _x.disable_axis.y, _x.disable_axis.z, _x.disable_axis.roll, _x.disable_axis.pitch, _x.disable_axis.yaw, _x.position_tolerance.x, _x.position_tolerance.y, _x.position_tolerance.z, _x.orientation_tolerance.roll, _x.orientation_tolerance.pitch, _x.orientation_tolerance.yaw))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal is None:
        self.goal = auv_msgs.msg.GoalDescriptor()
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.orientation is None:
        self.orientation = auv_msgs.msg.RPY()
      if self.disable_axis is None:
        self.disable_axis = auv_msgs.msg.Bool6Axis()
      if self.position_tolerance is None:
        self.position_tolerance = geometry_msgs.msg.Vector3()
      if self.orientation_tolerance is None:
        self.orientation_tolerance = auv_msgs.msg.RPY()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.requester = str[start:end].decode('utf-8')
      else:
        self.goal.requester = str[start:end]
      _x = self
      start = end
      end += 87
      (_x.goal.id, _x.goal.priority, _x.altitude_mode, _x.position.x, _x.position.y, _x.position.z, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.disable_axis.x, _x.disable_axis.y, _x.disable_axis.z, _x.disable_axis.roll, _x.disable_axis.pitch, _x.disable_axis.yaw, _x.position_tolerance.x, _x.position_tolerance.y, _x.position_tolerance.z, _x.orientation_tolerance.roll, _x.orientation_tolerance.pitch, _x.orientation_tolerance.yaw,) = _struct_2IB3d3f6B3d3f.unpack(str[start:end])
      self.altitude_mode = bool(self.altitude_mode)
      self.disable_axis.x = bool(self.disable_axis.x)
      self.disable_axis.y = bool(self.disable_axis.y)
      self.disable_axis.z = bool(self.disable_axis.z)
      self.disable_axis.roll = bool(self.disable_axis.roll)
      self.disable_axis.pitch = bool(self.disable_axis.pitch)
      self.disable_axis.yaw = bool(self.disable_axis.yaw)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.requester
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2IB3d3f6B3d3f.pack(_x.goal.id, _x.goal.priority, _x.altitude_mode, _x.position.x, _x.position.y, _x.position.z, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.disable_axis.x, _x.disable_axis.y, _x.disable_axis.z, _x.disable_axis.roll, _x.disable_axis.pitch, _x.disable_axis.yaw, _x.position_tolerance.x, _x.position_tolerance.y, _x.position_tolerance.z, _x.orientation_tolerance.roll, _x.orientation_tolerance.pitch, _x.orientation_tolerance.yaw))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal is None:
        self.goal = auv_msgs.msg.GoalDescriptor()
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.orientation is None:
        self.orientation = auv_msgs.msg.RPY()
      if self.disable_axis is None:
        self.disable_axis = auv_msgs.msg.Bool6Axis()
      if self.position_tolerance is None:
        self.position_tolerance = geometry_msgs.msg.Vector3()
      if self.orientation_tolerance is None:
        self.orientation_tolerance = auv_msgs.msg.RPY()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.requester = str[start:end].decode('utf-8')
      else:
        self.goal.requester = str[start:end]
      _x = self
      start = end
      end += 87
      (_x.goal.id, _x.goal.priority, _x.altitude_mode, _x.position.x, _x.position.y, _x.position.z, _x.orientation.roll, _x.orientation.pitch, _x.orientation.yaw, _x.disable_axis.x, _x.disable_axis.y, _x.disable_axis.z, _x.disable_axis.roll, _x.disable_axis.pitch, _x.disable_axis.yaw, _x.position_tolerance.x, _x.position_tolerance.y, _x.position_tolerance.z, _x.orientation_tolerance.roll, _x.orientation_tolerance.pitch, _x.orientation_tolerance.yaw,) = _struct_2IB3d3f6B3d3f.unpack(str[start:end])
      self.altitude_mode = bool(self.altitude_mode)
      self.disable_axis.x = bool(self.disable_axis.x)
      self.disable_axis.y = bool(self.disable_axis.y)
      self.disable_axis.z = bool(self.disable_axis.z)
      self.disable_axis.roll = bool(self.disable_axis.roll)
      self.disable_axis.pitch = bool(self.disable_axis.pitch)
      self.disable_axis.yaw = bool(self.disable_axis.yaw)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2IB3d3f6B3d3f = struct.Struct("<2IB3d3f6B3d3f")
