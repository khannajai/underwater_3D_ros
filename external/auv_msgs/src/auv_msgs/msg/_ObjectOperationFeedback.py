"""autogenerated by genpy from auv_msgs/ObjectOperationFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class ObjectOperationFeedback(genpy.Message):
  _md5sum = "2ba8daaeaac47494bd7f3b580ebdb69c"
  _type = "auv_msgs/ObjectOperationFeedback"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header

# Action progress

string state

uint32 num_waypoints

uint32 num_waypoints_completed

float32 intervention_percent_complete

std_msgs/Duration intervention_est_time_left

int32 step
int32 STEP_REACHING=1
int32 STEP_GRASPING=2
int32 STEP_TASK=3
int32 STEP_OTHER=-1


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: std_msgs/Duration
duration data

"""
  # Pseudo-constants
  STEP_REACHING = 1
  STEP_GRASPING = 2
  STEP_TASK = 3
  STEP_OTHER = -1

  __slots__ = ['header','state','num_waypoints','num_waypoints_completed','intervention_percent_complete','intervention_est_time_left','step']
  _slot_types = ['std_msgs/Header','string','uint32','uint32','float32','std_msgs/Duration','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,state,num_waypoints,num_waypoints_completed,intervention_percent_complete,intervention_est_time_left,step

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectOperationFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.state is None:
        self.state = ''
      if self.num_waypoints is None:
        self.num_waypoints = 0
      if self.num_waypoints_completed is None:
        self.num_waypoints_completed = 0
      if self.intervention_percent_complete is None:
        self.intervention_percent_complete = 0.
      if self.intervention_est_time_left is None:
        self.intervention_est_time_left = std_msgs.msg.Duration()
      if self.step is None:
        self.step = 0
    else:
      self.header = std_msgs.msg.Header()
      self.state = ''
      self.num_waypoints = 0
      self.num_waypoints_completed = 0
      self.intervention_percent_complete = 0.
      self.intervention_est_time_left = std_msgs.msg.Duration()
      self.step = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2If3i.pack(_x.num_waypoints, _x.num_waypoints_completed, _x.intervention_percent_complete, _x.intervention_est_time_left.data.secs, _x.intervention_est_time_left.data.nsecs, _x.step))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.intervention_est_time_left is None:
        self.intervention_est_time_left = std_msgs.msg.Duration()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.num_waypoints, _x.num_waypoints_completed, _x.intervention_percent_complete, _x.intervention_est_time_left.data.secs, _x.intervention_est_time_left.data.nsecs, _x.step,) = _struct_2If3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2If3i.pack(_x.num_waypoints, _x.num_waypoints_completed, _x.intervention_percent_complete, _x.intervention_est_time_left.data.secs, _x.intervention_est_time_left.data.nsecs, _x.step))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.intervention_est_time_left is None:
        self.intervention_est_time_left = std_msgs.msg.Duration()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.num_waypoints, _x.num_waypoints_completed, _x.intervention_percent_complete, _x.intervention_est_time_left.data.secs, _x.intervention_est_time_left.data.nsecs, _x.step,) = _struct_2If3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2If3i = struct.Struct("<2If3i")
