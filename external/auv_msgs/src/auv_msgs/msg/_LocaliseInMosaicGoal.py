"""autogenerated by genpy from auv_msgs/LocaliseInMosaicGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auv_msgs.msg
import geometry_msgs.msg

class LocaliseInMosaicGoal(genpy.Message):
  _md5sum = "9c5b4921a1555eca890977a207d394d8"
  _type = "auv_msgs/LocaliseInMosaicGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Attempt to discover the vehicle's pose within the specified large mosaic image.
#
# May need to be performed with vehicle stationary due to computation time.
# May be useful to provide constraints on odometry whilst localising, e.g. at least 
# estimate visual motion every second, to speed up localisation calculations. 
# Could slow/stop vehicle during this process. Potential to specify pose 
# radius/covariance cutoff probability for mosaic localisation action.

# ID of the image to localise within. 
string view_image_id

# Features to use for localisation, specified in image frame.
ImageFeature view_feature

# Frame of the suggested camera to use.
string camera_frame


================================================================================
MSG: auv_msgs/ImageFeature
# A single feature within a 2D image.

# Position of feature in image (z is unused)
geometry_msgs/Point position

# Array of float32 values describing the feature.
float32[] descriptor

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['view_image_id','view_feature','camera_frame']
  _slot_types = ['string','auv_msgs/ImageFeature','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       view_image_id,view_feature,camera_frame

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocaliseInMosaicGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.view_image_id is None:
        self.view_image_id = ''
      if self.view_feature is None:
        self.view_feature = auv_msgs.msg.ImageFeature()
      if self.camera_frame is None:
        self.camera_frame = ''
    else:
      self.view_image_id = ''
      self.view_feature = auv_msgs.msg.ImageFeature()
      self.camera_frame = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.view_image_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.view_feature.position.x, _x.view_feature.position.y, _x.view_feature.position.z))
      length = len(self.view_feature.descriptor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.view_feature.descriptor))
      _x = self.camera_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.view_feature is None:
        self.view_feature = auv_msgs.msg.ImageFeature()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.view_image_id = str[start:end].decode('utf-8')
      else:
        self.view_image_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.view_feature.position.x, _x.view_feature.position.y, _x.view_feature.position.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.view_feature.descriptor = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_frame = str[start:end].decode('utf-8')
      else:
        self.camera_frame = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.view_image_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.view_feature.position.x, _x.view_feature.position.y, _x.view_feature.position.z))
      length = len(self.view_feature.descriptor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.view_feature.descriptor.tostring())
      _x = self.camera_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.view_feature is None:
        self.view_feature = auv_msgs.msg.ImageFeature()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.view_image_id = str[start:end].decode('utf-8')
      else:
        self.view_image_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.view_feature.position.x, _x.view_feature.position.y, _x.view_feature.position.z,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.view_feature.descriptor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_frame = str[start:end].decode('utf-8')
      else:
        self.camera_frame = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
