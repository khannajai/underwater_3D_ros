/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/srv/PlanVehicleSearchPath.srv */
#ifndef AUV_MSGS_SERVICE_PLANVEHICLESEARCHPATH_H
#define AUV_MSGS_SERVICE_PLANVEHICLESEARCHPATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "auv_msgs/VehiclePose.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct PlanVehicleSearchPathRequest_ {
  typedef PlanVehicleSearchPathRequest_<ContainerAllocator> Type;

  PlanVehicleSearchPathRequest_()
  : depth_mode(false)
  , altitude(0.0)
  , depth(0.0)
  , start_north(0.0)
  , start_east(0.0)
  , end_north(0.0)
  , end_east(0.0)
  , max_bottom_gradient(0.0)
  {
  }

  PlanVehicleSearchPathRequest_(const ContainerAllocator& _alloc)
  : depth_mode(false)
  , altitude(0.0)
  , depth(0.0)
  , start_north(0.0)
  , start_east(0.0)
  , end_north(0.0)
  , end_east(0.0)
  , max_bottom_gradient(0.0)
  {
  }

  typedef uint8_t _depth_mode_type;
  uint8_t depth_mode;

  typedef float _altitude_type;
  float altitude;

  typedef float _depth_type;
  float depth;

  typedef float _start_north_type;
  float start_north;

  typedef float _start_east_type;
  float start_east;

  typedef float _end_north_type;
  float end_north;

  typedef float _end_east_type;
  float end_east;

  typedef float _max_bottom_gradient_type;
  float max_bottom_gradient;


  typedef boost::shared_ptr< ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlanVehicleSearchPathRequest
typedef  ::auv_msgs::PlanVehicleSearchPathRequest_<std::allocator<void> > PlanVehicleSearchPathRequest;

typedef boost::shared_ptr< ::auv_msgs::PlanVehicleSearchPathRequest> PlanVehicleSearchPathRequestPtr;
typedef boost::shared_ptr< ::auv_msgs::PlanVehicleSearchPathRequest const> PlanVehicleSearchPathRequestConstPtr;


template <class ContainerAllocator>
struct PlanVehicleSearchPathResponse_ {
  typedef PlanVehicleSearchPathResponse_<ContainerAllocator> Type;

  PlanVehicleSearchPathResponse_()
  : success(false)
  , error_num(0)
  , pose()
  , altitude_mode()
  {
  }

  PlanVehicleSearchPathResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , error_num(0)
  , pose(_alloc)
  , altitude_mode(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef int32_t _error_num_type;
  int32_t error_num;

  typedef std::vector< ::auv_msgs::VehiclePose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::VehiclePose_<ContainerAllocator> >::other >  _pose_type;
  std::vector< ::auv_msgs::VehiclePose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::VehiclePose_<ContainerAllocator> >::other >  pose;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _altitude_mode_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  altitude_mode;

  enum { ERROR_MISSING_BATHYMETRY = 1 };
  enum { ERROR_OTHER = -1 };

  typedef boost::shared_ptr< ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlanVehicleSearchPathResponse
typedef  ::auv_msgs::PlanVehicleSearchPathResponse_<std::allocator<void> > PlanVehicleSearchPathResponse;

typedef boost::shared_ptr< ::auv_msgs::PlanVehicleSearchPathResponse> PlanVehicleSearchPathResponsePtr;
typedef boost::shared_ptr< ::auv_msgs::PlanVehicleSearchPathResponse const> PlanVehicleSearchPathResponseConstPtr;

struct PlanVehicleSearchPath
{

typedef PlanVehicleSearchPathRequest Request;
typedef PlanVehicleSearchPathResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PlanVehicleSearchPath
} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a35aefb191d9deb40033668383f7e750";
  }

  static const char* value(const  ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa35aefb191d9deb4ULL;
  static const uint64_t static_value2 = 0x0033668383f7e750ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/PlanVehicleSearchPathRequest";
  }

  static const char* value(const  ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
bool depth_mode\n\
\n\
float32 altitude\n\
float32 depth\n\
\n\
float32 start_north\n\
float32 start_east\n\
float32 end_north\n\
float32 end_east\n\
float32 max_bottom_gradient\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a49f66d103bc0d426a45032f4254908b";
  }

  static const char* value(const  ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa49f66d103bc0d42ULL;
  static const uint64_t static_value2 = 0x6a45032f4254908bULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/PlanVehicleSearchPathResponse";
  }

  static const char* value(const  ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool success\n\
int32 error_num\n\
int32 ERROR_MISSING_BATHYMETRY = 1\n\
int32 ERROR_OTHER = -1\n\
\n\
\n\
VehiclePose[] pose\n\
\n\
\n\
\n\
\n\
\n\
bool[] altitude_mode\n\
\n\
\n\
================================================================================\n\
MSG: auv_msgs/VehiclePose\n\
# Position and orientation of the vehicle. \n\
\n\
NED position\n\
RPY orientation\n\
\n\
================================================================================\n\
MSG: auv_msgs/NED\n\
# Position or velocity in the right-handed NED coordinate frame.\n\
\n\
# metres north, positive towards true north.\n\
float64 north\n\
\n\
# metres east, positive towards true east.\n\
float64 east\n\
\n\
# metres down, positive towards the centre of the earth.\n\
float64 depth\n\
\n\
================================================================================\n\
MSG: auv_msgs/RPY\n\
# Orientation or orientation velocity in a frame consistent with the right-handed NED coordinate frame.\n\
\n\
# Fixed-axis roll, in radians. Positive clockwise rotation about the X axis, looking forward.\n\
float32 roll\n\
\n\
# Fixed-axis pitch, in radians. Positive upwards rotation of the vehicle nose about the Y axis.\n\
float32 pitch\n\
\n\
# Fixed-axis yaw, in radians. Positive clockwise rotation about the Z axis, looking down.\n\
float32 yaw\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.depth_mode);
    stream.next(m.altitude);
    stream.next(m.depth);
    stream.next(m.start_north);
    stream.next(m.start_east);
    stream.next(m.end_north);
    stream.next(m.end_east);
    stream.next(m.max_bottom_gradient);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlanVehicleSearchPathRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.error_num);
    stream.next(m.pose);
    stream.next(m.altitude_mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlanVehicleSearchPathResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<auv_msgs::PlanVehicleSearchPath> {
  static const char* value() 
  {
    return "28b40ee493b99da239fe762d65f76ab9";
  }

  static const char* value(const auv_msgs::PlanVehicleSearchPath&) { return value(); } 
};

template<>
struct DataType<auv_msgs::PlanVehicleSearchPath> {
  static const char* value() 
  {
    return "auv_msgs/PlanVehicleSearchPath";
  }

  static const char* value(const auv_msgs::PlanVehicleSearchPath&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "28b40ee493b99da239fe762d65f76ab9";
  }

  static const char* value(const auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/PlanVehicleSearchPath";
  }

  static const char* value(const auv_msgs::PlanVehicleSearchPathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "28b40ee493b99da239fe762d65f76ab9";
  }

  static const char* value(const auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/PlanVehicleSearchPath";
  }

  static const char* value(const auv_msgs::PlanVehicleSearchPathResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // AUV_MSGS_SERVICE_PLANVEHICLESEARCHPATH_H

