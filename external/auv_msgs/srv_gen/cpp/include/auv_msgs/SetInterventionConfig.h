/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/srv/SetInterventionConfig.srv */
#ifndef AUV_MSGS_SERVICE_SETINTERVENTIONCONFIG_H
#define AUV_MSGS_SERVICE_SETINTERVENTIONCONFIG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "auv_msgs/InterventionSpec.h"



namespace auv_msgs
{
template <class ContainerAllocator>
struct SetInterventionConfigRequest_ {
  typedef SetInterventionConfigRequest_<ContainerAllocator> Type;

  SetInterventionConfigRequest_()
  : spec()
  {
  }

  SetInterventionConfigRequest_(const ContainerAllocator& _alloc)
  : spec(_alloc)
  {
  }

  typedef  ::auv_msgs::InterventionSpec_<ContainerAllocator>  _spec_type;
   ::auv_msgs::InterventionSpec_<ContainerAllocator>  spec;


  typedef boost::shared_ptr< ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetInterventionConfigRequest
typedef  ::auv_msgs::SetInterventionConfigRequest_<std::allocator<void> > SetInterventionConfigRequest;

typedef boost::shared_ptr< ::auv_msgs::SetInterventionConfigRequest> SetInterventionConfigRequestPtr;
typedef boost::shared_ptr< ::auv_msgs::SetInterventionConfigRequest const> SetInterventionConfigRequestConstPtr;


template <class ContainerAllocator>
struct SetInterventionConfigResponse_ {
  typedef SetInterventionConfigResponse_<ContainerAllocator> Type;

  SetInterventionConfigResponse_()
  : ok(false)
  , error_num(0)
  , error_string()
  {
  }

  SetInterventionConfigResponse_(const ContainerAllocator& _alloc)
  : ok(false)
  , error_num(0)
  , error_string(_alloc)
  {
  }

  typedef uint8_t _ok_type;
  uint8_t ok;

  typedef int32_t _error_num_type;
  int32_t error_num;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_string_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  error_string;

  enum { ERROR_BAD_PARAM = 1 };
  enum { ERROR_SERVICE_RUNNING = 2 };
  enum { ERROR_OTHER = -1 };

  typedef boost::shared_ptr< ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetInterventionConfigResponse
typedef  ::auv_msgs::SetInterventionConfigResponse_<std::allocator<void> > SetInterventionConfigResponse;

typedef boost::shared_ptr< ::auv_msgs::SetInterventionConfigResponse> SetInterventionConfigResponsePtr;
typedef boost::shared_ptr< ::auv_msgs::SetInterventionConfigResponse const> SetInterventionConfigResponseConstPtr;

struct SetInterventionConfig
{

typedef SetInterventionConfigRequest Request;
typedef SetInterventionConfigResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetInterventionConfig
} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aa3744c1fcbef66e785cfe708a2b0dc2";
  }

  static const char* value(const  ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaa3744c1fcbef66eULL;
  static const uint64_t static_value2 = 0x785cfe708a2b0dc2ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/SetInterventionConfigRequest";
  }

  static const char* value(const  ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
InterventionSpec spec\n\
\n\
\n\
================================================================================\n\
MSG: auv_msgs/InterventionSpec\n\
# Specification of an intervention operation, containing one or more\n\
# intervention tasks.\n\
\n\
# Unique identifier for this intervention specification\n\
string id\n\
\n\
# Frame of the camera that captured the image (may be virtual).\n\
string camera_frame\n\
\n\
# Timestamp of the image.\n\
time stamp\n\
\n\
ImageFeature[] view_feature\n\
\n\
# Bounding box of the Target of Interest inside the view.\n\
sensor_msgs/RegionOfInterest roi\n\
float32 roi_rotation\n\
\n\
ImageFeature[] object_feature\n\
\n\
# Array of task specifications. All tasks must be completed for intervention\n\
# to succeed.\n\
InterventionTaskSpec[] task_spec\n\
\n\
================================================================================\n\
MSG: auv_msgs/ImageFeature\n\
# A single feature within a 2D image.\n\
\n\
# Position of feature in image (z is unused)\n\
geometry_msgs/Point position\n\
\n\
# Array of float32 values describing the feature.\n\
float32[] descriptor\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
================================================================================\n\
MSG: auv_msgs/InterventionTaskSpec\n\
# Specification of the intervention task, given as a task type to perform\n\
# on an object identified with a bounding box on an image.\n\
\n\
# Type of intervention task to perform.\n\
int32 task_type\n\
int32 TASK_RECOVERY=1\n\
int32 TASK_HOOK_CABLE=2\n\
int32 TASK_PUSH_BUTTON=3\n\
int32 TASK_OPEN_VALVE=4\n\
\n\
# Array of strategy specifications, in descending order of preference.\n\
InterventionStrategySpec[] strategy_spec\n\
\n\
================================================================================\n\
MSG: auv_msgs/InterventionStrategySpec\n\
# Specification of the intervention strategy.\n\
\n\
# Grasp frame given wrt bounding box origin\n\
geometry_msgs/Transform grasp_frame\n\
\n\
# Hand preshape\n\
int32 preshape\n\
int32 PRESHAPE_CYLINDRICAL_PRECISION=1\n\
int32 PRESHAPE_CYLINDRICAL_POWER=2\n\
int32 PRESHAPE_ONE_FINGER=3\n\
int32 PRESHAPE_HOOK=4\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8a34db9e4c5ab50b1c2a620d4f14366c";
  }

  static const char* value(const  ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8a34db9e4c5ab50bULL;
  static const uint64_t static_value2 = 0x1c2a620d4f14366cULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/SetInterventionConfigResponse";
  }

  static const char* value(const  ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool ok\n\
\n\
\n\
int32 error_num\n\
int32 ERROR_BAD_PARAM = 1\n\
int32 ERROR_SERVICE_RUNNING = 2\n\
int32 ERROR_OTHER = -1\n\
\n\
\n\
\n\
string error_string\n\
\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.spec);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetInterventionConfigRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ok);
    stream.next(m.error_num);
    stream.next(m.error_string);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetInterventionConfigResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<auv_msgs::SetInterventionConfig> {
  static const char* value() 
  {
    return "eaf712383e643f9336cb68a3aabad76e";
  }

  static const char* value(const auv_msgs::SetInterventionConfig&) { return value(); } 
};

template<>
struct DataType<auv_msgs::SetInterventionConfig> {
  static const char* value() 
  {
    return "auv_msgs/SetInterventionConfig";
  }

  static const char* value(const auv_msgs::SetInterventionConfig&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eaf712383e643f9336cb68a3aabad76e";
  }

  static const char* value(const auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/SetInterventionConfig";
  }

  static const char* value(const auv_msgs::SetInterventionConfigRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eaf712383e643f9336cb68a3aabad76e";
  }

  static const char* value(const auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/SetInterventionConfig";
  }

  static const char* value(const auv_msgs::SetInterventionConfigResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // AUV_MSGS_SERVICE_SETINTERVENTIONCONFIG_H

