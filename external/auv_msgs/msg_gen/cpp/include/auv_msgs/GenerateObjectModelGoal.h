/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/GenerateObjectModelGoal.msg */
#ifndef AUV_MSGS_MESSAGE_GENERATEOBJECTMODELGOAL_H
#define AUV_MSGS_MESSAGE_GENERATEOBJECTMODELGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Polygon.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct GenerateObjectModelGoal_ {
  typedef GenerateObjectModelGoal_<ContainerAllocator> Type;

  GenerateObjectModelGoal_()
  : camera_frame()
  , stamp()
  , polygon()
  {
  }

  GenerateObjectModelGoal_(const ContainerAllocator& _alloc)
  : camera_frame(_alloc)
  , stamp()
  , polygon(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _camera_frame_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  camera_frame;

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _polygon_type;
   ::geometry_msgs::Polygon_<ContainerAllocator>  polygon;


  typedef boost::shared_ptr< ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GenerateObjectModelGoal
typedef  ::auv_msgs::GenerateObjectModelGoal_<std::allocator<void> > GenerateObjectModelGoal;

typedef boost::shared_ptr< ::auv_msgs::GenerateObjectModelGoal> GenerateObjectModelGoalPtr;
typedef boost::shared_ptr< ::auv_msgs::GenerateObjectModelGoal const> GenerateObjectModelGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "158a318441532ae480efb1af5361222f";
  }

  static const char* value(const  ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x158a318441532ae4ULL;
  static const uint64_t static_value2 = 0x80efb1af5361222fULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/GenerateObjectModelGoal";
  }

  static const char* value(const  ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Generates a model of an object described by a polygon in a 2D image.\n\
\n\
# Frame of the camera that captured the image (may be virtual)\n\
string camera_frame\n\
\n\
# Timestamp of the image\n\
time stamp\n\
\n\
# Polygon surrounding the object in image pixel coordinates (z=0)\n\
geometry_msgs/Polygon polygon\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.camera_frame);
    stream.next(m.stamp);
    stream.next(m.polygon);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GenerateObjectModelGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::GenerateObjectModelGoal_<ContainerAllocator> & v) 
  {
    s << indent << "camera_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.camera_frame);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "polygon: ";
s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.polygon);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_GENERATEOBJECTMODELGOAL_H

