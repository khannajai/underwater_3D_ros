/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/InterventionStrategySpec.msg */
#ifndef AUV_MSGS_MESSAGE_INTERVENTIONSTRATEGYSPEC_H
#define AUV_MSGS_MESSAGE_INTERVENTIONSTRATEGYSPEC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Transform.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct InterventionStrategySpec_ {
  typedef InterventionStrategySpec_<ContainerAllocator> Type;

  InterventionStrategySpec_()
  : grasp_frame()
  , preshape(0)
  {
  }

  InterventionStrategySpec_(const ContainerAllocator& _alloc)
  : grasp_frame(_alloc)
  , preshape(0)
  {
  }

  typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _grasp_frame_type;
   ::geometry_msgs::Transform_<ContainerAllocator>  grasp_frame;

  typedef int32_t _preshape_type;
  int32_t preshape;

  enum { PRESHAPE_CYLINDRICAL_PRECISION = 1 };
  enum { PRESHAPE_CYLINDRICAL_POWER = 2 };
  enum { PRESHAPE_ONE_FINGER = 3 };
  enum { PRESHAPE_HOOK = 4 };

  typedef boost::shared_ptr< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct InterventionStrategySpec
typedef  ::auv_msgs::InterventionStrategySpec_<std::allocator<void> > InterventionStrategySpec;

typedef boost::shared_ptr< ::auv_msgs::InterventionStrategySpec> InterventionStrategySpecPtr;
typedef boost::shared_ptr< ::auv_msgs::InterventionStrategySpec const> InterventionStrategySpecConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3c4b77f7990aea517de29ed69dd3e105";
  }

  static const char* value(const  ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3c4b77f7990aea51ULL;
  static const uint64_t static_value2 = 0x7de29ed69dd3e105ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/InterventionStrategySpec";
  }

  static const char* value(const  ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Specification of the intervention strategy.\n\
\n\
# Grasp frame given wrt bounding box origin\n\
geometry_msgs/Transform grasp_frame\n\
\n\
# Hand preshape\n\
int32 preshape\n\
int32 PRESHAPE_CYLINDRICAL_PRECISION=1\n\
int32 PRESHAPE_CYLINDRICAL_POWER=2\n\
int32 PRESHAPE_ONE_FINGER=3\n\
int32 PRESHAPE_HOOK=4\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.grasp_frame);
    stream.next(m.preshape);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InterventionStrategySpec_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::InterventionStrategySpec_<ContainerAllocator> & v) 
  {
    s << indent << "grasp_frame: ";
s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_frame);
    s << indent << "preshape: ";
    Printer<int32_t>::stream(s, indent + "  ", v.preshape);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_INTERVENTIONSTRATEGYSPEC_H

