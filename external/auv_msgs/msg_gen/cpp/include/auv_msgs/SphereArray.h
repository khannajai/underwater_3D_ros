/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/SphereArray.msg */
#ifndef AUV_MSGS_MESSAGE_SPHEREARRAY_H
#define AUV_MSGS_MESSAGE_SPHEREARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "auv_msgs/Sphere.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct SphereArray_ {
  typedef SphereArray_<ContainerAllocator> Type;

  SphereArray_()
  : spheres()
  {
  }

  SphereArray_(const ContainerAllocator& _alloc)
  : spheres(_alloc)
  {
  }

  typedef std::vector< ::auv_msgs::Sphere_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::Sphere_<ContainerAllocator> >::other >  _spheres_type;
  std::vector< ::auv_msgs::Sphere_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::Sphere_<ContainerAllocator> >::other >  spheres;


  typedef boost::shared_ptr< ::auv_msgs::SphereArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::SphereArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SphereArray
typedef  ::auv_msgs::SphereArray_<std::allocator<void> > SphereArray;

typedef boost::shared_ptr< ::auv_msgs::SphereArray> SphereArrayPtr;
typedef boost::shared_ptr< ::auv_msgs::SphereArray const> SphereArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::SphereArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::SphereArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::SphereArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::SphereArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::SphereArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f96e535a43fc5e097bbf3d170fb8b981";
  }

  static const char* value(const  ::auv_msgs::SphereArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf96e535a43fc5e09ULL;
  static const uint64_t static_value2 = 0x7bbf3d170fb8b981ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::SphereArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/SphereArray";
  }

  static const char* value(const  ::auv_msgs::SphereArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::SphereArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Sphere[] spheres\n\
\n\
================================================================================\n\
MSG: auv_msgs/Sphere\n\
geometry_msgs/Point center\n\
float64 radius\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::SphereArray_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::SphereArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.spheres);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SphereArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::SphereArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::SphereArray_<ContainerAllocator> & v) 
  {
    s << indent << "spheres[]" << std::endl;
    for (size_t i = 0; i < v.spheres.size(); ++i)
    {
      s << indent << "  spheres[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::auv_msgs::Sphere_<ContainerAllocator> >::stream(s, indent + "    ", v.spheres[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_SPHEREARRAY_H

