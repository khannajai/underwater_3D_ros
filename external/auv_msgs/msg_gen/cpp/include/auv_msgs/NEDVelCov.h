/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/NEDVelCov.msg */
#ifndef AUV_MSGS_MESSAGE_NEDVELCOV_H
#define AUV_MSGS_MESSAGE_NEDVELCOV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "auv_msgs/NED.h"
#include "auv_msgs/NED.h"
#include "auv_msgs/NED.h"
#include "auv_msgs/NED.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct NEDVelCov_ {
  typedef NEDVelCov_<ContainerAllocator> Type;

  NEDVelCov_()
  : header()
  , position()
  , velocity()
  , position_var()
  , velocity_var()
  {
  }

  NEDVelCov_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , position(_alloc)
  , velocity(_alloc)
  , position_var(_alloc)
  , velocity_var(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::auv_msgs::NED_<ContainerAllocator>  _position_type;
   ::auv_msgs::NED_<ContainerAllocator>  position;

  typedef  ::auv_msgs::NED_<ContainerAllocator>  _velocity_type;
   ::auv_msgs::NED_<ContainerAllocator>  velocity;

  typedef  ::auv_msgs::NED_<ContainerAllocator>  _position_var_type;
   ::auv_msgs::NED_<ContainerAllocator>  position_var;

  typedef  ::auv_msgs::NED_<ContainerAllocator>  _velocity_var_type;
   ::auv_msgs::NED_<ContainerAllocator>  velocity_var;


  typedef boost::shared_ptr< ::auv_msgs::NEDVelCov_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::NEDVelCov_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NEDVelCov
typedef  ::auv_msgs::NEDVelCov_<std::allocator<void> > NEDVelCov;

typedef boost::shared_ptr< ::auv_msgs::NEDVelCov> NEDVelCovPtr;
typedef boost::shared_ptr< ::auv_msgs::NEDVelCov const> NEDVelCovConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::NEDVelCov_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::NEDVelCov_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::NEDVelCov_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::NEDVelCov_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::NEDVelCov_<ContainerAllocator> > {
  static const char* value() 
  {
    return "85e1b2034d502fbffd13416083871524";
  }

  static const char* value(const  ::auv_msgs::NEDVelCov_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x85e1b2034d502fbfULL;
  static const uint64_t static_value2 = 0xfd13416083871524ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::NEDVelCov_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/NEDVelCov";
  }

  static const char* value(const  ::auv_msgs::NEDVelCov_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::NEDVelCov_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#its important the header is stamped with the correct time, for a KF update\n\
std_msgs/Header header\n\
\n\
#msg that suits a kalman filter update of a constant velocity model\n\
#the first three of the state quantities are position (specific values can be set 'nan' indicating unobserved, e.g. depth on GPS)\n\
NED position\n\
#the second three of the state quantities are velocity(specific values can be set 'nan' indicating unobserved, e.g. all GPS values)\n\
NED velocity \n\
\n\
#variance along priciple dimentaions (we do not bother with full covaraiance)\n\
NED position_var\n\
NED velocity_var\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: auv_msgs/NED\n\
# Position or velocity in the right-handed NED coordinate frame.\n\
\n\
# metres north, positive towards true north.\n\
float64 north\n\
\n\
# metres east, positive towards true east.\n\
float64 east\n\
\n\
# metres down, positive towards the centre of the earth.\n\
float64 depth\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::NEDVelCov_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::NEDVelCov_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.position_var);
    stream.next(m.velocity_var);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NEDVelCov_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::NEDVelCov_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::NEDVelCov_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
s << std::endl;
    Printer< ::auv_msgs::NED_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
s << std::endl;
    Printer< ::auv_msgs::NED_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "position_var: ";
s << std::endl;
    Printer< ::auv_msgs::NED_<ContainerAllocator> >::stream(s, indent + "  ", v.position_var);
    s << indent << "velocity_var: ";
s << std::endl;
    Printer< ::auv_msgs::NED_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity_var);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_NEDVELCOV_H

