/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/SonarCircles.msg */
#ifndef AUV_MSGS_MESSAGE_SONARCIRCLES_H
#define AUV_MSGS_MESSAGE_SONARCIRCLES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct SonarCircles_ {
  typedef SonarCircles_<ContainerAllocator> Type;

  SonarCircles_()
  : header()
  , position()
  , circles()
  {
  }

  SonarCircles_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , position(_alloc)
  , circles(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  position;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _circles_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  circles;


  typedef boost::shared_ptr< ::auv_msgs::SonarCircles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::SonarCircles_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SonarCircles
typedef  ::auv_msgs::SonarCircles_<std::allocator<void> > SonarCircles;

typedef boost::shared_ptr< ::auv_msgs::SonarCircles> SonarCirclesPtr;
typedef boost::shared_ptr< ::auv_msgs::SonarCircles const> SonarCirclesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::SonarCircles_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::SonarCircles_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::SonarCircles_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::SonarCircles_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::SonarCircles_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9ee2e10960c8a6c8693f5856202978f0";
  }

  static const char* value(const  ::auv_msgs::SonarCircles_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9ee2e10960c8a6c8ULL;
  static const uint64_t static_value2 = 0x693f5856202978f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::SonarCircles_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/SonarCircles";
  }

  static const char* value(const  ::auv_msgs::SonarCircles_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::SonarCircles_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Detected circles (x,y,radius) in a 2D image.\n\
\n\
Header header\n\
\n\
# Position of the center of the circle + radius (x,y,radius). z corresponds to radius.\n\
geometry_msgs/Point position\n\
\n\
# Array of float32 values of the values describing the circles (x,y,radius).\n\
float32[] circles\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::SonarCircles_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::auv_msgs::SonarCircles_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::auv_msgs::SonarCircles_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::SonarCircles_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.position);
    stream.next(m.circles);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SonarCircles_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::SonarCircles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::SonarCircles_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "circles[]" << std::endl;
    for (size_t i = 0; i < v.circles.size(); ++i)
    {
      s << indent << "  circles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.circles[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_SONARCIRCLES_H

