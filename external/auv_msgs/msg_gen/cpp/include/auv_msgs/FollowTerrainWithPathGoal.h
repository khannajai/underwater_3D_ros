/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/FollowTerrainWithPathGoal.msg */
#ifndef AUV_MSGS_MESSAGE_FOLLOWTERRAINWITHPATHGOAL_H
#define AUV_MSGS_MESSAGE_FOLLOWTERRAINWITHPATHGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "auv_msgs/VehiclePose.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct FollowTerrainWithPathGoal_ {
  typedef FollowTerrainWithPathGoal_<ContainerAllocator> Type;

  FollowTerrainWithPathGoal_()
  : pose()
  , altitude_mode()
  {
  }

  FollowTerrainWithPathGoal_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  , altitude_mode(_alloc)
  {
  }

  typedef std::vector< ::auv_msgs::VehiclePose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::VehiclePose_<ContainerAllocator> >::other >  _pose_type;
  std::vector< ::auv_msgs::VehiclePose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::VehiclePose_<ContainerAllocator> >::other >  pose;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _altitude_mode_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  altitude_mode;


  typedef boost::shared_ptr< ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FollowTerrainWithPathGoal
typedef  ::auv_msgs::FollowTerrainWithPathGoal_<std::allocator<void> > FollowTerrainWithPathGoal;

typedef boost::shared_ptr< ::auv_msgs::FollowTerrainWithPathGoal> FollowTerrainWithPathGoalPtr;
typedef boost::shared_ptr< ::auv_msgs::FollowTerrainWithPathGoal const> FollowTerrainWithPathGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eeb4412ba97b7597c3ac3c074a7ee9d6";
  }

  static const char* value(const  ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeeb4412ba97b7597ULL;
  static const uint64_t static_value2 = 0xc3ac3c074a7ee9d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/FollowTerrainWithPathGoal";
  }

  static const char* value(const  ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Follow the specified path, which may include both depth-mode and bottom\n\
# following altitude-mode sections.\n\
\n\
# Variable length array of vehicle trajectory poses.\n\
VehiclePose[] pose\n\
\n\
# Boolean array the same length as pose, where true indicates\n\
# that altitude mode control should preferably be used when sending\n\
# that pose as a waypoint to the pilot, with the altitude specified in the\n\
# request parameters.\n\
bool[] altitude_mode   \n\
\n\
\n\
================================================================================\n\
MSG: auv_msgs/VehiclePose\n\
# Position and orientation of the vehicle. \n\
\n\
NED position\n\
RPY orientation\n\
\n\
================================================================================\n\
MSG: auv_msgs/NED\n\
# Position or velocity in the right-handed NED coordinate frame.\n\
\n\
# metres north, positive towards true north.\n\
float64 north\n\
\n\
# metres east, positive towards true east.\n\
float64 east\n\
\n\
# metres down, positive towards the centre of the earth.\n\
float64 depth\n\
\n\
================================================================================\n\
MSG: auv_msgs/RPY\n\
# Orientation or orientation velocity in a frame consistent with the right-handed NED coordinate frame.\n\
\n\
# Fixed-axis roll, in radians. Positive clockwise rotation about the X axis, looking forward.\n\
float32 roll\n\
\n\
# Fixed-axis pitch, in radians. Positive upwards rotation of the vehicle nose about the Y axis.\n\
float32 pitch\n\
\n\
# Fixed-axis yaw, in radians. Positive clockwise rotation about the Z axis, looking down.\n\
float32 yaw\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
    stream.next(m.altitude_mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FollowTerrainWithPathGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::FollowTerrainWithPathGoal_<ContainerAllocator> & v) 
  {
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::auv_msgs::VehiclePose_<ContainerAllocator> >::stream(s, indent + "    ", v.pose[i]);
    }
    s << indent << "altitude_mode[]" << std::endl;
    for (size_t i = 0; i < v.altitude_mode.size(); ++i)
    {
      s << indent << "  altitude_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.altitude_mode[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_FOLLOWTERRAINWITHPATHGOAL_H

