/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/VisualMotion.msg */
#ifndef AUV_MSGS_MESSAGE_VISUALMOTION_H
#define AUV_MSGS_MESSAGE_VISUALMOTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Twist.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct VisualMotion_ {
  typedef VisualMotion_<ContainerAllocator> Type;

  VisualMotion_()
  : header()
  , reference_time_pose()
  , reference_time_twist()
  , pose()
  , twist()
  , variance_pose(0.0)
  , variance_twist(0.0)
  {
  }

  VisualMotion_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , reference_time_pose()
  , reference_time_twist()
  , pose(_alloc)
  , twist(_alloc)
  , variance_pose(0.0)
  , variance_twist(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef ros::Time _reference_time_pose_type;
  ros::Time reference_time_pose;

  typedef ros::Time _reference_time_twist_type;
  ros::Time reference_time_twist;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;

  typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
   ::geometry_msgs::Twist_<ContainerAllocator>  twist;

  typedef float _variance_pose_type;
  float variance_pose;

  typedef float _variance_twist_type;
  float variance_twist;


  typedef boost::shared_ptr< ::auv_msgs::VisualMotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::VisualMotion_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VisualMotion
typedef  ::auv_msgs::VisualMotion_<std::allocator<void> > VisualMotion;

typedef boost::shared_ptr< ::auv_msgs::VisualMotion> VisualMotionPtr;
typedef boost::shared_ptr< ::auv_msgs::VisualMotion const> VisualMotionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::VisualMotion_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::VisualMotion_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::VisualMotion_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::VisualMotion_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::VisualMotion_<ContainerAllocator> > {
  static const char* value() 
  {
    return "45241450d6deb0a24fe35e410497e2d0";
  }

  static const char* value(const  ::auv_msgs::VisualMotion_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x45241450d6deb0a2ULL;
  static const uint64_t static_value2 = 0x4fe35e410497e2d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::VisualMotion_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/VisualMotion";
  }

  static const char* value(const  ::auv_msgs::VisualMotion_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::VisualMotion_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Message describing estimated motion of the platform based \n\
# on pairs of optical images. Pose estimation may be performed\n\
# either between a fixed image and the most recent image, \n\
# or the most recent two images. Twist (velocity) estimation is \n\
# always estimated between the most recent two images.\n\
\n\
# Header frame is camera frame.\n\
# Header stamp is of the most recent image.\n\
Header header\n\
\n\
# Time of pose reference image.\n\
time reference_time_pose\n\
\n\
# Time of twist reference image.\n\
time reference_time_twist\n\
\n\
# Estimated relative pose.\n\
geometry_msgs/Pose pose\n\
\n\
# Estimated velocity.\n\
geometry_msgs/Twist twist\n\
\n\
# Variance in the pose estimate.\n\
float32 variance_pose\n\
\n\
# Variance in the twist estimate.\n\
float32 variance_twist\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::auv_msgs::VisualMotion_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::auv_msgs::VisualMotion_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::auv_msgs::VisualMotion_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::VisualMotion_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.reference_time_pose);
    stream.next(m.reference_time_twist);
    stream.next(m.pose);
    stream.next(m.twist);
    stream.next(m.variance_pose);
    stream.next(m.variance_twist);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VisualMotion_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::VisualMotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::VisualMotion_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "reference_time_pose: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.reference_time_pose);
    s << indent << "reference_time_twist: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.reference_time_twist);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "variance_pose: ";
    Printer<float>::stream(s, indent + "  ", v.variance_pose);
    s << indent << "variance_twist: ";
    Printer<float>::stream(s, indent + "  ", v.variance_twist);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_VISUALMOTION_H

