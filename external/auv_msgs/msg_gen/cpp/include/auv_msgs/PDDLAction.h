/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/PDDLAction.msg */
#ifndef AUV_MSGS_MESSAGE_PDDLACTION_H
#define AUV_MSGS_MESSAGE_PDDLACTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace auv_msgs
{
template <class ContainerAllocator>
struct PDDLAction_ {
  typedef PDDLAction_<ContainerAllocator> Type;

  PDDLAction_()
  : name()
  , duration(0.0)
  , params()
  {
  }

  PDDLAction_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , duration(0.0)
  , params(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef float _duration_type;
  float duration;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _params_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  params;


  typedef boost::shared_ptr< ::auv_msgs::PDDLAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::PDDLAction_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PDDLAction
typedef  ::auv_msgs::PDDLAction_<std::allocator<void> > PDDLAction;

typedef boost::shared_ptr< ::auv_msgs::PDDLAction> PDDLActionPtr;
typedef boost::shared_ptr< ::auv_msgs::PDDLAction const> PDDLActionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::PDDLAction_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::PDDLAction_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::PDDLAction_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::PDDLAction_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::PDDLAction_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f8c5c927ba43a1415c7d2a3d8b036b70";
  }

  static const char* value(const  ::auv_msgs::PDDLAction_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf8c5c927ba43a141ULL;
  static const uint64_t static_value2 = 0x5c7d2a3d8b036b70ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::PDDLAction_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/PDDLAction";
  }

  static const char* value(const  ::auv_msgs::PDDLAction_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::PDDLAction_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#name of the action\n\
string name\n\
\n\
# length fo time for the action to run for\n\
float32 duration\n\
\n\
# the parameters, values drawn from the :types set\n\
string[] params\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::PDDLAction_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::PDDLAction_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.duration);
    stream.next(m.params);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PDDLAction_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::PDDLAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::PDDLAction_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.params[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_PDDLACTION_H

