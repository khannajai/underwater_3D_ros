/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/VehiclePoseArray.msg */
#ifndef AUV_MSGS_MESSAGE_VEHICLEPOSEARRAY_H
#define AUV_MSGS_MESSAGE_VEHICLEPOSEARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "auv_msgs/VehiclePose.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct VehiclePoseArray_ {
  typedef VehiclePoseArray_<ContainerAllocator> Type;

  VehiclePoseArray_()
  : header()
  , poses()
  {
  }

  VehiclePoseArray_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , poses(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::auv_msgs::VehiclePose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::VehiclePose_<ContainerAllocator> >::other >  _poses_type;
  std::vector< ::auv_msgs::VehiclePose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::VehiclePose_<ContainerAllocator> >::other >  poses;


  typedef boost::shared_ptr< ::auv_msgs::VehiclePoseArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::VehiclePoseArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VehiclePoseArray
typedef  ::auv_msgs::VehiclePoseArray_<std::allocator<void> > VehiclePoseArray;

typedef boost::shared_ptr< ::auv_msgs::VehiclePoseArray> VehiclePoseArrayPtr;
typedef boost::shared_ptr< ::auv_msgs::VehiclePoseArray const> VehiclePoseArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::VehiclePoseArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::VehiclePoseArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::VehiclePoseArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::VehiclePoseArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::VehiclePoseArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f7beb870d66fda40e965e2a8f7b9b6c1";
  }

  static const char* value(const  ::auv_msgs::VehiclePoseArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf7beb870d66fda40ULL;
  static const uint64_t static_value2 = 0xe965e2a8f7b9b6c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::VehiclePoseArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/VehiclePoseArray";
  }

  static const char* value(const  ::auv_msgs::VehiclePoseArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::VehiclePoseArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
VehiclePose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: auv_msgs/VehiclePose\n\
# Position and orientation of the vehicle. \n\
\n\
NED position\n\
RPY orientation\n\
\n\
================================================================================\n\
MSG: auv_msgs/NED\n\
# Position or velocity in the right-handed NED coordinate frame.\n\
\n\
# metres north, positive towards true north.\n\
float64 north\n\
\n\
# metres east, positive towards true east.\n\
float64 east\n\
\n\
# metres down, positive towards the centre of the earth.\n\
float64 depth\n\
\n\
================================================================================\n\
MSG: auv_msgs/RPY\n\
# Orientation or orientation velocity in a frame consistent with the right-handed NED coordinate frame.\n\
\n\
# Fixed-axis roll, in radians. Positive clockwise rotation about the X axis, looking forward.\n\
float32 roll\n\
\n\
# Fixed-axis pitch, in radians. Positive upwards rotation of the vehicle nose about the Y axis.\n\
float32 pitch\n\
\n\
# Fixed-axis yaw, in radians. Positive clockwise rotation about the Z axis, looking down.\n\
float32 yaw\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::VehiclePoseArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::auv_msgs::VehiclePoseArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::auv_msgs::VehiclePoseArray_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::VehiclePoseArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.poses);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VehiclePoseArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::VehiclePoseArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::VehiclePoseArray_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::auv_msgs::VehiclePose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_VEHICLEPOSEARRAY_H

