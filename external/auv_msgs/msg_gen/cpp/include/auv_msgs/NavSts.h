/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/NavSts.msg */
#ifndef AUV_MSGS_MESSAGE_NAVSTS_H
#define AUV_MSGS_MESSAGE_NAVSTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "auv_msgs/DecimalLatLon.h"
#include "auv_msgs/DecimalLatLon.h"
#include "auv_msgs/NED.h"
#include "geometry_msgs/Point.h"
#include "auv_msgs/RPY.h"
#include "auv_msgs/RPY.h"
#include "auv_msgs/NED.h"
#include "auv_msgs/RPY.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct NavSts_ {
  typedef NavSts_<ContainerAllocator> Type;

  NavSts_()
  : header()
  , global_position()
  , origin()
  , position()
  , altitude(0.0)
  , body_velocity()
  , orientation()
  , orientation_rate()
  , position_variance()
  , orientation_variance()
  , status(0)
  {
  }

  NavSts_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , global_position(_alloc)
  , origin(_alloc)
  , position(_alloc)
  , altitude(0.0)
  , body_velocity(_alloc)
  , orientation(_alloc)
  , orientation_rate(_alloc)
  , position_variance(_alloc)
  , orientation_variance(_alloc)
  , status(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::auv_msgs::DecimalLatLon_<ContainerAllocator>  _global_position_type;
   ::auv_msgs::DecimalLatLon_<ContainerAllocator>  global_position;

  typedef  ::auv_msgs::DecimalLatLon_<ContainerAllocator>  _origin_type;
   ::auv_msgs::DecimalLatLon_<ContainerAllocator>  origin;

  typedef  ::auv_msgs::NED_<ContainerAllocator>  _position_type;
   ::auv_msgs::NED_<ContainerAllocator>  position;

  typedef float _altitude_type;
  float altitude;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _body_velocity_type;
   ::geometry_msgs::Point_<ContainerAllocator>  body_velocity;

  typedef  ::auv_msgs::RPY_<ContainerAllocator>  _orientation_type;
   ::auv_msgs::RPY_<ContainerAllocator>  orientation;

  typedef  ::auv_msgs::RPY_<ContainerAllocator>  _orientation_rate_type;
   ::auv_msgs::RPY_<ContainerAllocator>  orientation_rate;

  typedef  ::auv_msgs::NED_<ContainerAllocator>  _position_variance_type;
   ::auv_msgs::NED_<ContainerAllocator>  position_variance;

  typedef  ::auv_msgs::RPY_<ContainerAllocator>  _orientation_variance_type;
   ::auv_msgs::RPY_<ContainerAllocator>  orientation_variance;

  typedef uint8_t _status_type;
  uint8_t status;

  enum { STATUS_FAULT = 0 };
  enum { STATUS_LOCAL_FRAME_OK = 1 };
  enum { STATUS_GLOBAL_FRAME_OK = 2 };
  enum { STATUS_POSITION_OK = 3 };
  enum { STATUS_VELOCITY_OK = 4 };
  enum { STATUS_ESTIMATION_ERROR_OK = 8 };
  enum { STATUS_ALL_OK = 15 };

  typedef boost::shared_ptr< ::auv_msgs::NavSts_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::NavSts_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NavSts
typedef  ::auv_msgs::NavSts_<std::allocator<void> > NavSts;

typedef boost::shared_ptr< ::auv_msgs::NavSts> NavStsPtr;
typedef boost::shared_ptr< ::auv_msgs::NavSts const> NavStsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::NavSts_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::NavSts_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::NavSts_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::NavSts_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::NavSts_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ce9d43f0d458ab76be6de8266700753";
  }

  static const char* value(const  ::auv_msgs::NavSts_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4ce9d43f0d458ab7ULL;
  static const uint64_t static_value2 = 0x6be6de8266700753ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::NavSts_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/NavSts";
  }

  static const char* value(const  ::auv_msgs::NavSts_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::NavSts_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Sent by the navigator at 5-10 Hz.\n\
\n\
Header 	header\n\
\n\
DecimalLatLon global_position\n\
DecimalLatLon origin\n\
\n\
# NED position and altitude in metres. \n\
NED position\n\
float32 altitude\n\
\n\
# Body velocities in metres/sec.\n\
geometry_msgs/Point body_velocity\n\
\n\
# Orientation and orientation rate are in radians and radians/sec\n\
RPY orientation\n\
RPY orientation_rate\n\
\n\
# Variances for position and orientation\n\
NED position_variance\n\
RPY orientation_variance\n\
\n\
# Status and associated constants (flags)\n\
uint8 status\n\
uint8 STATUS_FAULT = 0\n\
uint8 STATUS_LOCAL_FRAME_OK = 1\n\
uint8 STATUS_GLOBAL_FRAME_OK = 2\n\
uint8 STATUS_POSITION_OK = 3\n\
uint8 STATUS_VELOCITY_OK = 4\n\
uint8 STATUS_ESTIMATION_ERROR_OK  = 8\n\
uint8 STATUS_ALL_OK = 15\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: auv_msgs/DecimalLatLon\n\
# Latitude and longitude, in decimal form.\n\
\n\
float64 latitude\n\
float64 longitude\n\
\n\
================================================================================\n\
MSG: auv_msgs/NED\n\
# Position or velocity in the right-handed NED coordinate frame.\n\
\n\
# metres north, positive towards true north.\n\
float64 north\n\
\n\
# metres east, positive towards true east.\n\
float64 east\n\
\n\
# metres down, positive towards the centre of the earth.\n\
float64 depth\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: auv_msgs/RPY\n\
# Orientation or orientation velocity in a frame consistent with the right-handed NED coordinate frame.\n\
\n\
# Fixed-axis roll, in radians. Positive clockwise rotation about the X axis, looking forward.\n\
float32 roll\n\
\n\
# Fixed-axis pitch, in radians. Positive upwards rotation of the vehicle nose about the Y axis.\n\
float32 pitch\n\
\n\
# Fixed-axis yaw, in radians. Positive clockwise rotation about the Z axis, looking down.\n\
float32 yaw\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::NavSts_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::auv_msgs::NavSts_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::auv_msgs::NavSts_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::NavSts_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.global_position);
    stream.next(m.origin);
    stream.next(m.position);
    stream.next(m.altitude);
    stream.next(m.body_velocity);
    stream.next(m.orientation);
    stream.next(m.orientation_rate);
    stream.next(m.position_variance);
    stream.next(m.orientation_variance);
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NavSts_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::NavSts_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::NavSts_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "global_position: ";
s << std::endl;
    Printer< ::auv_msgs::DecimalLatLon_<ContainerAllocator> >::stream(s, indent + "  ", v.global_position);
    s << indent << "origin: ";
s << std::endl;
    Printer< ::auv_msgs::DecimalLatLon_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "position: ";
s << std::endl;
    Printer< ::auv_msgs::NED_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "body_velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.body_velocity);
    s << indent << "orientation: ";
s << std::endl;
    Printer< ::auv_msgs::RPY_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "orientation_rate: ";
s << std::endl;
    Printer< ::auv_msgs::RPY_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation_rate);
    s << indent << "position_variance: ";
s << std::endl;
    Printer< ::auv_msgs::NED_<ContainerAllocator> >::stream(s, indent + "  ", v.position_variance);
    s << indent << "orientation_variance: ";
s << std::endl;
    Printer< ::auv_msgs::RPY_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation_variance);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_NAVSTS_H

