/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/SonarObserveGoal.msg */
#ifndef AUV_MSGS_MESSAGE_SONAROBSERVEGOAL_H
#define AUV_MSGS_MESSAGE_SONAROBSERVEGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "auv_msgs/VehiclePose.h"
#include "auv_msgs/NED.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct SonarObserveGoal_ {
  typedef SonarObserveGoal_<ContainerAllocator> Type;

  SonarObserveGoal_()
  : waypoint()
  , inspectionpoint()
  , minimum_duration()
  {
  }

  SonarObserveGoal_(const ContainerAllocator& _alloc)
  : waypoint(_alloc)
  , inspectionpoint(_alloc)
  , minimum_duration()
  {
  }

  typedef  ::auv_msgs::VehiclePose_<ContainerAllocator>  _waypoint_type;
   ::auv_msgs::VehiclePose_<ContainerAllocator>  waypoint;

  typedef  ::auv_msgs::NED_<ContainerAllocator>  _inspectionpoint_type;
   ::auv_msgs::NED_<ContainerAllocator>  inspectionpoint;

  typedef ros::Time _minimum_duration_type;
  ros::Time minimum_duration;


  typedef boost::shared_ptr< ::auv_msgs::SonarObserveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::SonarObserveGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SonarObserveGoal
typedef  ::auv_msgs::SonarObserveGoal_<std::allocator<void> > SonarObserveGoal;

typedef boost::shared_ptr< ::auv_msgs::SonarObserveGoal> SonarObserveGoalPtr;
typedef boost::shared_ptr< ::auv_msgs::SonarObserveGoal const> SonarObserveGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::SonarObserveGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::SonarObserveGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::SonarObserveGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::SonarObserveGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::SonarObserveGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "81f4fb0242f7dfe3d370ddedb0576be9";
  }

  static const char* value(const  ::auv_msgs::SonarObserveGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x81f4fb0242f7dfe3ULL;
  static const uint64_t static_value2 = 0xd370ddedb0576be9ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::SonarObserveGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/SonarObserveGoal";
  }

  static const char* value(const  ::auv_msgs::SonarObserveGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::SonarObserveGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Variable to specify final pose.\n\
VehiclePose waypoint\n\
NED inspectionpoint\n\
time minimum_duration\n\
\n\
\n\
================================================================================\n\
MSG: auv_msgs/VehiclePose\n\
# Position and orientation of the vehicle. \n\
\n\
NED position\n\
RPY orientation\n\
\n\
================================================================================\n\
MSG: auv_msgs/NED\n\
# Position or velocity in the right-handed NED coordinate frame.\n\
\n\
# metres north, positive towards true north.\n\
float64 north\n\
\n\
# metres east, positive towards true east.\n\
float64 east\n\
\n\
# metres down, positive towards the centre of the earth.\n\
float64 depth\n\
\n\
================================================================================\n\
MSG: auv_msgs/RPY\n\
# Orientation or orientation velocity in a frame consistent with the right-handed NED coordinate frame.\n\
\n\
# Fixed-axis roll, in radians. Positive clockwise rotation about the X axis, looking forward.\n\
float32 roll\n\
\n\
# Fixed-axis pitch, in radians. Positive upwards rotation of the vehicle nose about the Y axis.\n\
float32 pitch\n\
\n\
# Fixed-axis yaw, in radians. Positive clockwise rotation about the Z axis, looking down.\n\
float32 yaw\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::SonarObserveGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::auv_msgs::SonarObserveGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::SonarObserveGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.waypoint);
    stream.next(m.inspectionpoint);
    stream.next(m.minimum_duration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SonarObserveGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::SonarObserveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::SonarObserveGoal_<ContainerAllocator> & v) 
  {
    s << indent << "waypoint: ";
s << std::endl;
    Printer< ::auv_msgs::VehiclePose_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoint);
    s << indent << "inspectionpoint: ";
s << std::endl;
    Printer< ::auv_msgs::NED_<ContainerAllocator> >::stream(s, indent + "  ", v.inspectionpoint);
    s << indent << "minimum_duration: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.minimum_duration);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_SONAROBSERVEGOAL_H

