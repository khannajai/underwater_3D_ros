/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/LocaliseInMosaicGoal.msg */
#ifndef AUV_MSGS_MESSAGE_LOCALISEINMOSAICGOAL_H
#define AUV_MSGS_MESSAGE_LOCALISEINMOSAICGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "auv_msgs/ImageFeature.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct LocaliseInMosaicGoal_ {
  typedef LocaliseInMosaicGoal_<ContainerAllocator> Type;

  LocaliseInMosaicGoal_()
  : view_image_id()
  , view_feature()
  , camera_frame()
  {
  }

  LocaliseInMosaicGoal_(const ContainerAllocator& _alloc)
  : view_image_id(_alloc)
  , view_feature(_alloc)
  , camera_frame(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _view_image_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  view_image_id;

  typedef  ::auv_msgs::ImageFeature_<ContainerAllocator>  _view_feature_type;
   ::auv_msgs::ImageFeature_<ContainerAllocator>  view_feature;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _camera_frame_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  camera_frame;


  typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LocaliseInMosaicGoal
typedef  ::auv_msgs::LocaliseInMosaicGoal_<std::allocator<void> > LocaliseInMosaicGoal;

typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicGoal> LocaliseInMosaicGoalPtr;
typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicGoal const> LocaliseInMosaicGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9c5b4921a1555eca890977a207d394d8";
  }

  static const char* value(const  ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9c5b4921a1555ecaULL;
  static const uint64_t static_value2 = 0x890977a207d394d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/LocaliseInMosaicGoal";
  }

  static const char* value(const  ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Attempt to discover the vehicle's pose within the specified large mosaic image.\n\
#\n\
# May need to be performed with vehicle stationary due to computation time.\n\
# May be useful to provide constraints on odometry whilst localising, e.g. at least \n\
# estimate visual motion every second, to speed up localisation calculations. \n\
# Could slow/stop vehicle during this process. Potential to specify pose \n\
# radius/covariance cutoff probability for mosaic localisation action.\n\
\n\
# ID of the image to localise within. \n\
string view_image_id\n\
\n\
# Features to use for localisation, specified in image frame.\n\
ImageFeature view_feature\n\
\n\
# Frame of the suggested camera to use.\n\
string camera_frame\n\
\n\
\n\
================================================================================\n\
MSG: auv_msgs/ImageFeature\n\
# A single feature within a 2D image.\n\
\n\
# Position of feature in image (z is unused)\n\
geometry_msgs/Point position\n\
\n\
# Array of float32 values describing the feature.\n\
float32[] descriptor\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.view_image_id);
    stream.next(m.view_feature);
    stream.next(m.camera_frame);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocaliseInMosaicGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::LocaliseInMosaicGoal_<ContainerAllocator> & v) 
  {
    s << indent << "view_image_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.view_image_id);
    s << indent << "view_feature: ";
s << std::endl;
    Printer< ::auv_msgs::ImageFeature_<ContainerAllocator> >::stream(s, indent + "  ", v.view_feature);
    s << indent << "camera_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.camera_frame);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_LOCALISEINMOSAICGOAL_H

