/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/LocaliseInMosaicResult.msg */
#ifndef AUV_MSGS_MESSAGE_LOCALISEINMOSAICRESULT_H
#define AUV_MSGS_MESSAGE_LOCALISEINMOSAICRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace auv_msgs
{
template <class ContainerAllocator>
struct LocaliseInMosaicResult_ {
  typedef LocaliseInMosaicResult_<ContainerAllocator> Type;

  LocaliseInMosaicResult_()
  : frame_count(0)
  , identified_frame_count(0)
  {
  }

  LocaliseInMosaicResult_(const ContainerAllocator& _alloc)
  : frame_count(0)
  , identified_frame_count(0)
  {
  }

  typedef uint32_t _frame_count_type;
  uint32_t frame_count;

  typedef uint32_t _identified_frame_count_type;
  uint32_t identified_frame_count;


  typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LocaliseInMosaicResult
typedef  ::auv_msgs::LocaliseInMosaicResult_<std::allocator<void> > LocaliseInMosaicResult;

typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicResult> LocaliseInMosaicResultPtr;
typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicResult const> LocaliseInMosaicResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3ad9b12e60e32da913e0c4d8340ae65b";
  }

  static const char* value(const  ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3ad9b12e60e32da9ULL;
  static const uint64_t static_value2 = 0x13e0c4d8340ae65bULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/LocaliseInMosaicResult";
  }

  static const char* value(const  ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
# Number of frames processed.\n\
uint32 frame_count\n\
\n\
# Number of frames where the view was localised in the mosaic.\n\
uint32 identified_frame_count\n\
\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.frame_count);
    stream.next(m.identified_frame_count);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocaliseInMosaicResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::LocaliseInMosaicResult_<ContainerAllocator> & v) 
  {
    s << indent << "frame_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_count);
    s << indent << "identified_frame_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.identified_frame_count);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_LOCALISEINMOSAICRESULT_H

