/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/InterventionSpec.msg */
#ifndef AUV_MSGS_MESSAGE_INTERVENTIONSPEC_H
#define AUV_MSGS_MESSAGE_INTERVENTIONSPEC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "auv_msgs/ImageFeature.h"
#include "sensor_msgs/RegionOfInterest.h"
#include "auv_msgs/ImageFeature.h"
#include "auv_msgs/InterventionTaskSpec.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct InterventionSpec_ {
  typedef InterventionSpec_<ContainerAllocator> Type;

  InterventionSpec_()
  : id()
  , camera_frame()
  , stamp()
  , view_feature()
  , roi()
  , roi_rotation(0.0)
  , object_feature()
  , task_spec()
  {
  }

  InterventionSpec_(const ContainerAllocator& _alloc)
  : id(_alloc)
  , camera_frame(_alloc)
  , stamp()
  , view_feature(_alloc)
  , roi(_alloc)
  , roi_rotation(0.0)
  , object_feature(_alloc)
  , task_spec(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _camera_frame_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  camera_frame;

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef std::vector< ::auv_msgs::ImageFeature_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::ImageFeature_<ContainerAllocator> >::other >  _view_feature_type;
  std::vector< ::auv_msgs::ImageFeature_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::ImageFeature_<ContainerAllocator> >::other >  view_feature;

  typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _roi_type;
   ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  roi;

  typedef float _roi_rotation_type;
  float roi_rotation;

  typedef std::vector< ::auv_msgs::ImageFeature_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::ImageFeature_<ContainerAllocator> >::other >  _object_feature_type;
  std::vector< ::auv_msgs::ImageFeature_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::ImageFeature_<ContainerAllocator> >::other >  object_feature;

  typedef std::vector< ::auv_msgs::InterventionTaskSpec_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::InterventionTaskSpec_<ContainerAllocator> >::other >  _task_spec_type;
  std::vector< ::auv_msgs::InterventionTaskSpec_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auv_msgs::InterventionTaskSpec_<ContainerAllocator> >::other >  task_spec;


  typedef boost::shared_ptr< ::auv_msgs::InterventionSpec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::InterventionSpec_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct InterventionSpec
typedef  ::auv_msgs::InterventionSpec_<std::allocator<void> > InterventionSpec;

typedef boost::shared_ptr< ::auv_msgs::InterventionSpec> InterventionSpecPtr;
typedef boost::shared_ptr< ::auv_msgs::InterventionSpec const> InterventionSpecConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::InterventionSpec_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::InterventionSpec_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::InterventionSpec_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::InterventionSpec_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::InterventionSpec_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bd8e9cc17d96008b9cd94d4ad8d1c7fa";
  }

  static const char* value(const  ::auv_msgs::InterventionSpec_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbd8e9cc17d96008bULL;
  static const uint64_t static_value2 = 0x9cd94d4ad8d1c7faULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::InterventionSpec_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/InterventionSpec";
  }

  static const char* value(const  ::auv_msgs::InterventionSpec_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::InterventionSpec_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Specification of an intervention operation, containing one or more\n\
# intervention tasks.\n\
\n\
# Unique identifier for this intervention specification\n\
string id\n\
\n\
# Frame of the camera that captured the image (may be virtual).\n\
string camera_frame\n\
\n\
# Timestamp of the image.\n\
time stamp\n\
\n\
ImageFeature[] view_feature\n\
\n\
# Bounding box of the Target of Interest inside the view.\n\
sensor_msgs/RegionOfInterest roi\n\
float32 roi_rotation\n\
\n\
ImageFeature[] object_feature\n\
\n\
# Array of task specifications. All tasks must be completed for intervention\n\
# to succeed.\n\
InterventionTaskSpec[] task_spec\n\
\n\
================================================================================\n\
MSG: auv_msgs/ImageFeature\n\
# A single feature within a 2D image.\n\
\n\
# Position of feature in image (z is unused)\n\
geometry_msgs/Point position\n\
\n\
# Array of float32 values describing the feature.\n\
float32[] descriptor\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
================================================================================\n\
MSG: auv_msgs/InterventionTaskSpec\n\
# Specification of the intervention task, given as a task type to perform\n\
# on an object identified with a bounding box on an image.\n\
\n\
# Type of intervention task to perform.\n\
int32 task_type\n\
int32 TASK_RECOVERY=1\n\
int32 TASK_HOOK_CABLE=2\n\
int32 TASK_PUSH_BUTTON=3\n\
int32 TASK_OPEN_VALVE=4\n\
\n\
# Array of strategy specifications, in descending order of preference.\n\
InterventionStrategySpec[] strategy_spec\n\
\n\
================================================================================\n\
MSG: auv_msgs/InterventionStrategySpec\n\
# Specification of the intervention strategy.\n\
\n\
# Grasp frame given wrt bounding box origin\n\
geometry_msgs/Transform grasp_frame\n\
\n\
# Hand preshape\n\
int32 preshape\n\
int32 PRESHAPE_CYLINDRICAL_PRECISION=1\n\
int32 PRESHAPE_CYLINDRICAL_POWER=2\n\
int32 PRESHAPE_ONE_FINGER=3\n\
int32 PRESHAPE_HOOK=4\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::InterventionSpec_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::InterventionSpec_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.camera_frame);
    stream.next(m.stamp);
    stream.next(m.view_feature);
    stream.next(m.roi);
    stream.next(m.roi_rotation);
    stream.next(m.object_feature);
    stream.next(m.task_spec);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InterventionSpec_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::InterventionSpec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::InterventionSpec_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "camera_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.camera_frame);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "view_feature[]" << std::endl;
    for (size_t i = 0; i < v.view_feature.size(); ++i)
    {
      s << indent << "  view_feature[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::auv_msgs::ImageFeature_<ContainerAllocator> >::stream(s, indent + "    ", v.view_feature[i]);
    }
    s << indent << "roi: ";
s << std::endl;
    Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "  ", v.roi);
    s << indent << "roi_rotation: ";
    Printer<float>::stream(s, indent + "  ", v.roi_rotation);
    s << indent << "object_feature[]" << std::endl;
    for (size_t i = 0; i < v.object_feature.size(); ++i)
    {
      s << indent << "  object_feature[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::auv_msgs::ImageFeature_<ContainerAllocator> >::stream(s, indent + "    ", v.object_feature[i]);
    }
    s << indent << "task_spec[]" << std::endl;
    for (size_t i = 0; i < v.task_spec.size(); ++i)
    {
      s << indent << "  task_spec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::auv_msgs::InterventionTaskSpec_<ContainerAllocator> >::stream(s, indent + "    ", v.task_spec[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_INTERVENTIONSPEC_H

