/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/ImageFeature.msg */
#ifndef AUV_MSGS_MESSAGE_IMAGEFEATURE_H
#define AUV_MSGS_MESSAGE_IMAGEFEATURE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct ImageFeature_ {
  typedef ImageFeature_<ContainerAllocator> Type;

  ImageFeature_()
  : position()
  , descriptor()
  {
  }

  ImageFeature_(const ContainerAllocator& _alloc)
  : position(_alloc)
  , descriptor(_alloc)
  {
  }

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  position;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _descriptor_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  descriptor;


  typedef boost::shared_ptr< ::auv_msgs::ImageFeature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::ImageFeature_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ImageFeature
typedef  ::auv_msgs::ImageFeature_<std::allocator<void> > ImageFeature;

typedef boost::shared_ptr< ::auv_msgs::ImageFeature> ImageFeaturePtr;
typedef boost::shared_ptr< ::auv_msgs::ImageFeature const> ImageFeatureConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::ImageFeature_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::ImageFeature_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::ImageFeature_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::ImageFeature_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::ImageFeature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "60381b047909bcb02393bcf9f30b71e5";
  }

  static const char* value(const  ::auv_msgs::ImageFeature_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x60381b047909bcb0ULL;
  static const uint64_t static_value2 = 0x2393bcf9f30b71e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::ImageFeature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/ImageFeature";
  }

  static const char* value(const  ::auv_msgs::ImageFeature_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::ImageFeature_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A single feature within a 2D image.\n\
\n\
# Position of feature in image (z is unused)\n\
geometry_msgs/Point position\n\
\n\
# Array of float32 values describing the feature.\n\
float32[] descriptor\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::ImageFeature_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::ImageFeature_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.descriptor);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ImageFeature_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::ImageFeature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::ImageFeature_<ContainerAllocator> & v) 
  {
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "descriptor[]" << std::endl;
    for (size_t i = 0; i < v.descriptor.size(); ++i)
    {
      s << indent << "  descriptor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.descriptor[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_IMAGEFEATURE_H

