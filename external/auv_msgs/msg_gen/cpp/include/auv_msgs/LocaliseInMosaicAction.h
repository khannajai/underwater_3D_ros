/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/LocaliseInMosaicAction.msg */
#ifndef AUV_MSGS_MESSAGE_LOCALISEINMOSAICACTION_H
#define AUV_MSGS_MESSAGE_LOCALISEINMOSAICACTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "auv_msgs/LocaliseInMosaicActionGoal.h"
#include "auv_msgs/LocaliseInMosaicActionResult.h"
#include "auv_msgs/LocaliseInMosaicActionFeedback.h"

namespace auv_msgs
{
template <class ContainerAllocator>
struct LocaliseInMosaicAction_ {
  typedef LocaliseInMosaicAction_<ContainerAllocator> Type;

  LocaliseInMosaicAction_()
  : action_goal()
  , action_result()
  , action_feedback()
  {
  }

  LocaliseInMosaicAction_(const ContainerAllocator& _alloc)
  : action_goal(_alloc)
  , action_result(_alloc)
  , action_feedback(_alloc)
  {
  }

  typedef  ::auv_msgs::LocaliseInMosaicActionGoal_<ContainerAllocator>  _action_goal_type;
   ::auv_msgs::LocaliseInMosaicActionGoal_<ContainerAllocator>  action_goal;

  typedef  ::auv_msgs::LocaliseInMosaicActionResult_<ContainerAllocator>  _action_result_type;
   ::auv_msgs::LocaliseInMosaicActionResult_<ContainerAllocator>  action_result;

  typedef  ::auv_msgs::LocaliseInMosaicActionFeedback_<ContainerAllocator>  _action_feedback_type;
   ::auv_msgs::LocaliseInMosaicActionFeedback_<ContainerAllocator>  action_feedback;


  typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LocaliseInMosaicAction
typedef  ::auv_msgs::LocaliseInMosaicAction_<std::allocator<void> > LocaliseInMosaicAction;

typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicAction> LocaliseInMosaicActionPtr;
typedef boost::shared_ptr< ::auv_msgs::LocaliseInMosaicAction const> LocaliseInMosaicActionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ed9f12082f6ed9f0e0f9561b00c1568f";
  }

  static const char* value(const  ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xed9f12082f6ed9f0ULL;
  static const uint64_t static_value2 = 0xe0f9561b00c1568fULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/LocaliseInMosaicAction";
  }

  static const char* value(const  ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
LocaliseInMosaicActionGoal action_goal\n\
LocaliseInMosaicActionResult action_result\n\
LocaliseInMosaicActionFeedback action_feedback\n\
\n\
================================================================================\n\
MSG: auv_msgs/LocaliseInMosaicActionGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalID goal_id\n\
LocaliseInMosaicGoal goal\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: auv_msgs/LocaliseInMosaicGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Attempt to discover the vehicle's pose within the specified large mosaic image.\n\
#\n\
# May need to be performed with vehicle stationary due to computation time.\n\
# May be useful to provide constraints on odometry whilst localising, e.g. at least \n\
# estimate visual motion every second, to speed up localisation calculations. \n\
# Could slow/stop vehicle during this process. Potential to specify pose \n\
# radius/covariance cutoff probability for mosaic localisation action.\n\
\n\
# ID of the image to localise within. \n\
string view_image_id\n\
\n\
# Features to use for localisation, specified in image frame.\n\
ImageFeature view_feature\n\
\n\
# Frame of the suggested camera to use.\n\
string camera_frame\n\
\n\
\n\
================================================================================\n\
MSG: auv_msgs/ImageFeature\n\
# A single feature within a 2D image.\n\
\n\
# Position of feature in image (z is unused)\n\
geometry_msgs/Point position\n\
\n\
# Array of float32 values describing the feature.\n\
float32[] descriptor\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: auv_msgs/LocaliseInMosaicActionResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
LocaliseInMosaicResult result\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalStatus\n\
GoalID goal_id\n\
uint8 status\n\
uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n\
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n\
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n\
                            #   and has since completed its execution (Terminal State)\n\
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n\
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n\
                            #    to some failure (Terminal State)\n\
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n\
                            #    because the goal was unattainable or invalid (Terminal State)\n\
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n\
                            #    and has not yet completed execution\n\
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n\
                            #    but the action server has not yet confirmed that the goal is canceled\n\
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n\
                            #    and was successfully cancelled (Terminal State)\n\
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n\
                            #    sent over the wire by an action server\n\
\n\
#Allow for the user to associate a string with GoalStatus for debugging\n\
string text\n\
\n\
\n\
================================================================================\n\
MSG: auv_msgs/LocaliseInMosaicResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
# Number of frames processed.\n\
uint32 frame_count\n\
\n\
# Number of frames where the view was localised in the mosaic.\n\
uint32 identified_frame_count\n\
\n\
\n\
================================================================================\n\
MSG: auv_msgs/LocaliseInMosaicActionFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
LocaliseInMosaicFeedback feedback\n\
\n\
================================================================================\n\
MSG: auv_msgs/LocaliseInMosaicFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
# Image ID repeated from request\n\
string view_image_id\n\
\n\
# Frame of the camera used to localise.\n\
string camera_frame\n\
\n\
# Timestamp of the camera image used.\n\
time stamp\n\
\n\
# True if view is identified.\n\
bool identified\n\
\n\
# Pose is specified in view image frame.\n\
geometry_msgs/PoseWithCovariance vehicle_relative_to_view\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.action_goal);
    stream.next(m.action_result);
    stream.next(m.action_feedback);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocaliseInMosaicAction_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::LocaliseInMosaicAction_<ContainerAllocator> & v) 
  {
    s << indent << "action_goal: ";
s << std::endl;
    Printer< ::auv_msgs::LocaliseInMosaicActionGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.action_goal);
    s << indent << "action_result: ";
s << std::endl;
    Printer< ::auv_msgs::LocaliseInMosaicActionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.action_result);
    s << indent << "action_feedback: ";
s << std::endl;
    Printer< ::auv_msgs::LocaliseInMosaicActionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.action_feedback);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_LOCALISEINMOSAICACTION_H

