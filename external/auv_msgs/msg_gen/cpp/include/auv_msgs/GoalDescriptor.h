/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/GoalDescriptor.msg */
#ifndef AUV_MSGS_MESSAGE_GOALDESCRIPTOR_H
#define AUV_MSGS_MESSAGE_GOALDESCRIPTOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace auv_msgs
{
template <class ContainerAllocator>
struct GoalDescriptor_ {
  typedef GoalDescriptor_<ContainerAllocator> Type;

  GoalDescriptor_()
  : requester()
  , id(0)
  , priority(0)
  {
  }

  GoalDescriptor_(const ContainerAllocator& _alloc)
  : requester(_alloc)
  , id(0)
  , priority(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _requester_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  requester;

  typedef uint32_t _id_type;
  uint32_t id;

  typedef uint32_t _priority_type;
  uint32_t priority;

  enum { PRIORITY_LOW = 0 };
  enum { PRIORITY_NORMAL = 10 };
  enum { PRIORITY_AVOID_OBSTACLE = 20 };
  enum { PRIORITY_EMERGENCY = 30 };
  enum { PRIORITY_MANUAL_OVERRIDE = 40 };

  typedef boost::shared_ptr< ::auv_msgs::GoalDescriptor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::GoalDescriptor_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GoalDescriptor
typedef  ::auv_msgs::GoalDescriptor_<std::allocator<void> > GoalDescriptor;

typedef boost::shared_ptr< ::auv_msgs::GoalDescriptor> GoalDescriptorPtr;
typedef boost::shared_ptr< ::auv_msgs::GoalDescriptor const> GoalDescriptorConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::GoalDescriptor_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::GoalDescriptor_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::GoalDescriptor_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::GoalDescriptor_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::GoalDescriptor_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dbad5128112e1cb789315dd314ee3b12";
  }

  static const char* value(const  ::auv_msgs::GoalDescriptor_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdbad5128112e1cb7ULL;
  static const uint64_t static_value2 = 0x89315dd314ee3b12ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::GoalDescriptor_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/GoalDescriptor";
  }

  static const char* value(const  ::auv_msgs::GoalDescriptor_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::GoalDescriptor_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Contains values common to all waypoint request and status messages.\n\
# Waypoint goals with higher priority trump lower priority goals. For\n\
# goals of the same priority, the pilot should follow the latest\n\
# received.\n\
\n\
# Name of the requesting node, used with id to identify the request.\n\
string requester\n\
\n\
# Goal ID for the request\n\
uint32 id\n\
\n\
uint32 priority\n\
uint32 PRIORITY_LOW = 0\n\
uint32 PRIORITY_NORMAL = 10\n\
uint32 PRIORITY_AVOID_OBSTACLE = 20\n\
uint32 PRIORITY_EMERGENCY = 30\n\
uint32 PRIORITY_MANUAL_OVERRIDE  = 40\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::GoalDescriptor_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::GoalDescriptor_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.requester);
    stream.next(m.id);
    stream.next(m.priority);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GoalDescriptor_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::GoalDescriptor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::GoalDescriptor_<ContainerAllocator> & v) 
  {
    s << indent << "requester: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.requester);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "priority: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.priority);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_GOALDESCRIPTOR_H

