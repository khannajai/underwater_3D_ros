/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/NED.msg */
#ifndef AUV_MSGS_MESSAGE_NED_H
#define AUV_MSGS_MESSAGE_NED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace auv_msgs
{
template <class ContainerAllocator>
struct NED_ {
  typedef NED_<ContainerAllocator> Type;

  NED_()
  : north(0.0)
  , east(0.0)
  , depth(0.0)
  {
  }

  NED_(const ContainerAllocator& _alloc)
  : north(0.0)
  , east(0.0)
  , depth(0.0)
  {
  }

  typedef double _north_type;
  double north;

  typedef double _east_type;
  double east;

  typedef double _depth_type;
  double depth;


  typedef boost::shared_ptr< ::auv_msgs::NED_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::NED_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NED
typedef  ::auv_msgs::NED_<std::allocator<void> > NED;

typedef boost::shared_ptr< ::auv_msgs::NED> NEDPtr;
typedef boost::shared_ptr< ::auv_msgs::NED const> NEDConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::NED_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::NED_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::NED_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::NED_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::NED_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4a16ce817ea5a7912b32dfb04540797b";
  }

  static const char* value(const  ::auv_msgs::NED_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4a16ce817ea5a791ULL;
  static const uint64_t static_value2 = 0x2b32dfb04540797bULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::NED_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/NED";
  }

  static const char* value(const  ::auv_msgs::NED_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::NED_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Position or velocity in the right-handed NED coordinate frame.\n\
\n\
# metres north, positive towards true north.\n\
float64 north\n\
\n\
# metres east, positive towards true east.\n\
float64 east\n\
\n\
# metres down, positive towards the centre of the earth.\n\
float64 depth\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::NED_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::auv_msgs::NED_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::NED_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.north);
    stream.next(m.east);
    stream.next(m.depth);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NED_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::NED_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::NED_<ContainerAllocator> & v) 
  {
    s << indent << "north: ";
    Printer<double>::stream(s, indent + "  ", v.north);
    s << indent << "east: ";
    Printer<double>::stream(s, indent + "  ", v.east);
    s << indent << "depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_NED_H

