/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/DecimalLatLon.msg */
#ifndef AUV_MSGS_MESSAGE_DECIMALLATLON_H
#define AUV_MSGS_MESSAGE_DECIMALLATLON_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace auv_msgs
{
template <class ContainerAllocator>
struct DecimalLatLon_ {
  typedef DecimalLatLon_<ContainerAllocator> Type;

  DecimalLatLon_()
  : latitude(0.0)
  , longitude(0.0)
  {
  }

  DecimalLatLon_(const ContainerAllocator& _alloc)
  : latitude(0.0)
  , longitude(0.0)
  {
  }

  typedef double _latitude_type;
  double latitude;

  typedef double _longitude_type;
  double longitude;


  typedef boost::shared_ptr< ::auv_msgs::DecimalLatLon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::DecimalLatLon_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DecimalLatLon
typedef  ::auv_msgs::DecimalLatLon_<std::allocator<void> > DecimalLatLon;

typedef boost::shared_ptr< ::auv_msgs::DecimalLatLon> DecimalLatLonPtr;
typedef boost::shared_ptr< ::auv_msgs::DecimalLatLon const> DecimalLatLonConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::DecimalLatLon_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::DecimalLatLon_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::DecimalLatLon_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::DecimalLatLon_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::DecimalLatLon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "680c6dc7da65a2421a822205dcbdb600";
  }

  static const char* value(const  ::auv_msgs::DecimalLatLon_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x680c6dc7da65a242ULL;
  static const uint64_t static_value2 = 0x1a822205dcbdb600ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::DecimalLatLon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/DecimalLatLon";
  }

  static const char* value(const  ::auv_msgs::DecimalLatLon_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::DecimalLatLon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Latitude and longitude, in decimal form.\n\
\n\
float64 latitude\n\
float64 longitude\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::DecimalLatLon_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::auv_msgs::DecimalLatLon_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::DecimalLatLon_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.latitude);
    stream.next(m.longitude);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DecimalLatLon_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::DecimalLatLon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::DecimalLatLon_<ContainerAllocator> & v) 
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_DECIMALLATLON_H

