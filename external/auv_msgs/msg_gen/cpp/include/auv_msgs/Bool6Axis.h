/* Auto-generated by genmsg_cpp for file /home/osl/src/hwu-osl-ros-pkg/hwu_osl_common/auv_msgs/msg/Bool6Axis.msg */
#ifndef AUV_MSGS_MESSAGE_BOOL6AXIS_H
#define AUV_MSGS_MESSAGE_BOOL6AXIS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace auv_msgs
{
template <class ContainerAllocator>
struct Bool6Axis_ {
  typedef Bool6Axis_<ContainerAllocator> Type;

  Bool6Axis_()
  : x(false)
  , y(false)
  , z(false)
  , roll(false)
  , pitch(false)
  , yaw(false)
  {
  }

  Bool6Axis_(const ContainerAllocator& _alloc)
  : x(false)
  , y(false)
  , z(false)
  , roll(false)
  , pitch(false)
  , yaw(false)
  {
  }

  typedef uint8_t _x_type;
  uint8_t x;

  typedef uint8_t _y_type;
  uint8_t y;

  typedef uint8_t _z_type;
  uint8_t z;

  typedef uint8_t _roll_type;
  uint8_t roll;

  typedef uint8_t _pitch_type;
  uint8_t pitch;

  typedef uint8_t _yaw_type;
  uint8_t yaw;


  typedef boost::shared_ptr< ::auv_msgs::Bool6Axis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auv_msgs::Bool6Axis_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Bool6Axis
typedef  ::auv_msgs::Bool6Axis_<std::allocator<void> > Bool6Axis;

typedef boost::shared_ptr< ::auv_msgs::Bool6Axis> Bool6AxisPtr;
typedef boost::shared_ptr< ::auv_msgs::Bool6Axis const> Bool6AxisConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::auv_msgs::Bool6Axis_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::auv_msgs::Bool6Axis_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace auv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::Bool6Axis_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::auv_msgs::Bool6Axis_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::auv_msgs::Bool6Axis_<ContainerAllocator> > {
  static const char* value() 
  {
    return "38f836659cedbc069e466741ffb25422";
  }

  static const char* value(const  ::auv_msgs::Bool6Axis_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x38f836659cedbc06ULL;
  static const uint64_t static_value2 = 0x9e466741ffb25422ULL;
};

template<class ContainerAllocator>
struct DataType< ::auv_msgs::Bool6Axis_<ContainerAllocator> > {
  static const char* value() 
  {
    return "auv_msgs/Bool6Axis";
  }

  static const char* value(const  ::auv_msgs::Bool6Axis_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::auv_msgs::Bool6Axis_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool x\n\
bool y\n\
bool z\n\
bool roll\n\
bool pitch\n\
bool yaw\n\
\n\
";
  }

  static const char* value(const  ::auv_msgs::Bool6Axis_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::auv_msgs::Bool6Axis_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::auv_msgs::Bool6Axis_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Bool6Axis_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auv_msgs::Bool6Axis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::auv_msgs::Bool6Axis_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z);
    s << indent << "roll: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUV_MSGS_MESSAGE_BOOL6AXIS_H

