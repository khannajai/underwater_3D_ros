"""autogenerated by genpy from vehicle_msgs/PilotStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import diagnostic_msgs.msg
import std_msgs.msg

class PilotStatus(genpy.Message):
  _md5sum = "95e902a78691918b0940fdc05c04242c"
  _type = "vehicle_msgs/PilotStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# vehicle_msgs/PilotStatus.msg
#   reports the current status of the pilot

Header header                          # message header

string status                          # status (e.g. enabled, disabled)
string mode                            # mode (e.g. position tracking, velocity tracking, station keeping)

float32[6] des_pos                     # position goal
float32[6] des_vel                     # velocity goal
float32[6] err_pos                     # current error in position
float32[6] err_vel                     # current error in velocity

float32[6] lim_vel_user                # current velocity limits (user)
float32[6] lim_vel_ctrl                # current velocity limits (controller)

diagnostic_msgs/KeyValue[] info        # optional field for additional data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: diagnostic_msgs/KeyValue
string key # what to label this value when viewing
string value # a value to track over time

"""
  __slots__ = ['header','status','mode','des_pos','des_vel','err_pos','err_vel','lim_vel_user','lim_vel_ctrl','info']
  _slot_types = ['std_msgs/Header','string','string','float32[6]','float32[6]','float32[6]','float32[6]','float32[6]','float32[6]','diagnostic_msgs/KeyValue[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status,mode,des_pos,des_vel,err_pos,err_vel,lim_vel_user,lim_vel_ctrl,info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PilotStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = ''
      if self.mode is None:
        self.mode = ''
      if self.des_pos is None:
        self.des_pos = [0.,0.,0.,0.,0.,0.]
      if self.des_vel is None:
        self.des_vel = [0.,0.,0.,0.,0.,0.]
      if self.err_pos is None:
        self.err_pos = [0.,0.,0.,0.,0.,0.]
      if self.err_vel is None:
        self.err_vel = [0.,0.,0.,0.,0.,0.]
      if self.lim_vel_user is None:
        self.lim_vel_user = [0.,0.,0.,0.,0.,0.]
      if self.lim_vel_ctrl is None:
        self.lim_vel_ctrl = [0.,0.,0.,0.,0.,0.]
      if self.info is None:
        self.info = []
    else:
      self.header = std_msgs.msg.Header()
      self.status = ''
      self.mode = ''
      self.des_pos = [0.,0.,0.,0.,0.,0.]
      self.des_vel = [0.,0.,0.,0.,0.,0.]
      self.err_pos = [0.,0.,0.,0.,0.,0.]
      self.err_vel = [0.,0.,0.,0.,0.,0.]
      self.lim_vel_user = [0.,0.,0.,0.,0.,0.]
      self.lim_vel_ctrl = [0.,0.,0.,0.,0.,0.]
      self.info = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_6f.pack(*self.des_pos))
      buff.write(_struct_6f.pack(*self.des_vel))
      buff.write(_struct_6f.pack(*self.err_pos))
      buff.write(_struct_6f.pack(*self.err_vel))
      buff.write(_struct_6f.pack(*self.lim_vel_user))
      buff.write(_struct_6f.pack(*self.lim_vel_ctrl))
      length = len(self.info)
      buff.write(_struct_I.pack(length))
      for val1 in self.info:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.info is None:
        self.info = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8')
      else:
        self.mode = str[start:end]
      start = end
      end += 24
      self.des_pos = _struct_6f.unpack(str[start:end])
      start = end
      end += 24
      self.des_vel = _struct_6f.unpack(str[start:end])
      start = end
      end += 24
      self.err_pos = _struct_6f.unpack(str[start:end])
      start = end
      end += 24
      self.err_vel = _struct_6f.unpack(str[start:end])
      start = end
      end += 24
      self.lim_vel_user = _struct_6f.unpack(str[start:end])
      start = end
      end += 24
      self.lim_vel_ctrl = _struct_6f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.info = []
      for i in range(0, length):
        val1 = diagnostic_msgs.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8')
        else:
          val1.value = str[start:end]
        self.info.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.des_pos.tostring())
      buff.write(self.des_vel.tostring())
      buff.write(self.err_pos.tostring())
      buff.write(self.err_vel.tostring())
      buff.write(self.lim_vel_user.tostring())
      buff.write(self.lim_vel_ctrl.tostring())
      length = len(self.info)
      buff.write(_struct_I.pack(length))
      for val1 in self.info:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.info is None:
        self.info = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8')
      else:
        self.mode = str[start:end]
      start = end
      end += 24
      self.des_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.des_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.err_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.err_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.lim_vel_user = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.lim_vel_ctrl = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.info = []
      for i in range(0, length):
        val1 = diagnostic_msgs.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8')
        else:
          val1.value = str[start:end]
        self.info.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_6f = struct.Struct("<6f")
