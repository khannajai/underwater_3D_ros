/* Auto-generated by genmsg_cpp for file /home/osl/src/nessie_highlander/vehicle_msgs/srv/BooleanService.srv */
#ifndef VEHICLE_MSGS_SERVICE_BOOLEANSERVICE_H
#define VEHICLE_MSGS_SERVICE_BOOLEANSERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vehicle_msgs
{
template <class ContainerAllocator>
struct BooleanServiceRequest_ {
  typedef BooleanServiceRequest_<ContainerAllocator> Type;

  BooleanServiceRequest_()
  : request(false)
  {
  }

  BooleanServiceRequest_(const ContainerAllocator& _alloc)
  : request(false)
  {
  }

  typedef uint8_t _request_type;
  uint8_t request;


  typedef boost::shared_ptr< ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BooleanServiceRequest
typedef  ::vehicle_msgs::BooleanServiceRequest_<std::allocator<void> > BooleanServiceRequest;

typedef boost::shared_ptr< ::vehicle_msgs::BooleanServiceRequest> BooleanServiceRequestPtr;
typedef boost::shared_ptr< ::vehicle_msgs::BooleanServiceRequest const> BooleanServiceRequestConstPtr;


template <class ContainerAllocator>
struct BooleanServiceResponse_ {
  typedef BooleanServiceResponse_<ContainerAllocator> Type;

  BooleanServiceResponse_()
  : response(false)
  {
  }

  BooleanServiceResponse_(const ContainerAllocator& _alloc)
  : response(false)
  {
  }

  typedef uint8_t _response_type;
  uint8_t response;


  typedef boost::shared_ptr< ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BooleanServiceResponse
typedef  ::vehicle_msgs::BooleanServiceResponse_<std::allocator<void> > BooleanServiceResponse;

typedef boost::shared_ptr< ::vehicle_msgs::BooleanServiceResponse> BooleanServiceResponsePtr;
typedef boost::shared_ptr< ::vehicle_msgs::BooleanServiceResponse const> BooleanServiceResponseConstPtr;

struct BooleanService
{

typedef BooleanServiceRequest Request;
typedef BooleanServiceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct BooleanService
} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f7e5ad6ab0ddf42c5727a195315a470";
  }

  static const char* value(const  ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f7e5ad6ab0ddf42ULL;
  static const uint64_t static_value2 = 0xc5727a195315a470ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/BooleanServiceRequest";
  }

  static const char* value(const  ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
bool request\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "003b81baa95ab323fc1ddf3c7d0bee81";
  }

  static const char* value(const  ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x003b81baa95ab323ULL;
  static const uint64_t static_value2 = 0xfc1ddf3c7d0bee81ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/BooleanServiceResponse";
  }

  static const char* value(const  ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool response\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.request);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BooleanServiceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.response);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BooleanServiceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vehicle_msgs::BooleanService> {
  static const char* value() 
  {
    return "9a74408ed4558f2d49b9e90001338a55";
  }

  static const char* value(const vehicle_msgs::BooleanService&) { return value(); } 
};

template<>
struct DataType<vehicle_msgs::BooleanService> {
  static const char* value() 
  {
    return "vehicle_msgs/BooleanService";
  }

  static const char* value(const vehicle_msgs::BooleanService&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9a74408ed4558f2d49b9e90001338a55";
  }

  static const char* value(const vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/BooleanService";
  }

  static const char* value(const vehicle_msgs::BooleanServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9a74408ed4558f2d49b9e90001338a55";
  }

  static const char* value(const vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/BooleanService";
  }

  static const char* value(const vehicle_msgs::BooleanServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VEHICLE_MSGS_SERVICE_BOOLEANSERVICE_H

