/* Auto-generated by genmsg_cpp for file /home/osl/src/nessie_highlander/vehicle_msgs/srv/FloatService.srv */
#ifndef VEHICLE_MSGS_SERVICE_FLOATSERVICE_H
#define VEHICLE_MSGS_SERVICE_FLOATSERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vehicle_msgs
{
template <class ContainerAllocator>
struct FloatServiceRequest_ {
  typedef FloatServiceRequest_<ContainerAllocator> Type;

  FloatServiceRequest_()
  : request()
  {
  }

  FloatServiceRequest_(const ContainerAllocator& _alloc)
  : request(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _request_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  request;


  typedef boost::shared_ptr< ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FloatServiceRequest
typedef  ::vehicle_msgs::FloatServiceRequest_<std::allocator<void> > FloatServiceRequest;

typedef boost::shared_ptr< ::vehicle_msgs::FloatServiceRequest> FloatServiceRequestPtr;
typedef boost::shared_ptr< ::vehicle_msgs::FloatServiceRequest const> FloatServiceRequestConstPtr;


template <class ContainerAllocator>
struct FloatServiceResponse_ {
  typedef FloatServiceResponse_<ContainerAllocator> Type;

  FloatServiceResponse_()
  : result(false)
  , response()
  {
  }

  FloatServiceResponse_(const ContainerAllocator& _alloc)
  : result(false)
  , response(_alloc)
  {
  }

  typedef uint8_t _result_type;
  uint8_t result;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _response_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  response;


  typedef boost::shared_ptr< ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FloatServiceResponse
typedef  ::vehicle_msgs::FloatServiceResponse_<std::allocator<void> > FloatServiceResponse;

typedef boost::shared_ptr< ::vehicle_msgs::FloatServiceResponse> FloatServiceResponsePtr;
typedef boost::shared_ptr< ::vehicle_msgs::FloatServiceResponse const> FloatServiceResponseConstPtr;

struct FloatService
{

typedef FloatServiceRequest Request;
typedef FloatServiceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FloatService
} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6898e334ece0fbcc46522ab6c1c3eaa2";
  }

  static const char* value(const  ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6898e334ece0fbccULL;
  static const uint64_t static_value2 = 0x46522ab6c1c3eaa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/FloatServiceRequest";
  }

  static const char* value(const  ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
float32[] request\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a551eab8c1ebdd905a0a2ef86bef562a";
  }

  static const char* value(const  ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa551eab8c1ebdd90ULL;
  static const uint64_t static_value2 = 0x5a0a2ef86bef562aULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/FloatServiceResponse";
  }

  static const char* value(const  ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool result\n\
float32[] response\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::FloatServiceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.request);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FloatServiceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::FloatServiceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.response);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FloatServiceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vehicle_msgs::FloatService> {
  static const char* value() 
  {
    return "bffed9851025f3aed64f7ec7e737ce26";
  }

  static const char* value(const vehicle_msgs::FloatService&) { return value(); } 
};

template<>
struct DataType<vehicle_msgs::FloatService> {
  static const char* value() 
  {
    return "vehicle_msgs/FloatService";
  }

  static const char* value(const vehicle_msgs::FloatService&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vehicle_msgs::FloatServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bffed9851025f3aed64f7ec7e737ce26";
  }

  static const char* value(const vehicle_msgs::FloatServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vehicle_msgs::FloatServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/FloatService";
  }

  static const char* value(const vehicle_msgs::FloatServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vehicle_msgs::FloatServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bffed9851025f3aed64f7ec7e737ce26";
  }

  static const char* value(const vehicle_msgs::FloatServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vehicle_msgs::FloatServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/FloatService";
  }

  static const char* value(const vehicle_msgs::FloatServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VEHICLE_MSGS_SERVICE_FLOATSERVICE_H

