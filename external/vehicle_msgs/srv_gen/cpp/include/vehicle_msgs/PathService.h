/* Auto-generated by genmsg_cpp for file /home/osl/src/nessie_highlander/vehicle_msgs/srv/PathService.srv */
#ifndef VEHICLE_MSGS_SERVICE_PATHSERVICE_H
#define VEHICLE_MSGS_SERVICE_PATHSERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Header.h"
#include "vehicle_msgs/FloatArray.h"
#include "diagnostic_msgs/KeyValue.h"


#include "diagnostic_msgs/KeyValue.h"

namespace vehicle_msgs
{
template <class ContainerAllocator>
struct PathServiceRequest_ {
  typedef PathServiceRequest_<ContainerAllocator> Type;

  PathServiceRequest_()
  : header()
  , command()
  , points()
  , options()
  {
  }

  PathServiceRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , command(_alloc)
  , points(_alloc)
  , options(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  command;

  typedef std::vector< ::vehicle_msgs::FloatArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::vehicle_msgs::FloatArray_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::vehicle_msgs::FloatArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::vehicle_msgs::FloatArray_<ContainerAllocator> >::other >  points;

  typedef std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  _options_type;
  std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  options;


  typedef boost::shared_ptr< ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::PathServiceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PathServiceRequest
typedef  ::vehicle_msgs::PathServiceRequest_<std::allocator<void> > PathServiceRequest;

typedef boost::shared_ptr< ::vehicle_msgs::PathServiceRequest> PathServiceRequestPtr;
typedef boost::shared_ptr< ::vehicle_msgs::PathServiceRequest const> PathServiceRequestConstPtr;


template <class ContainerAllocator>
struct PathServiceResponse_ {
  typedef PathServiceResponse_<ContainerAllocator> Type;

  PathServiceResponse_()
  : result(false)
  , state()
  , info()
  {
  }

  PathServiceResponse_(const ContainerAllocator& _alloc)
  : result(false)
  , state(_alloc)
  , info(_alloc)
  {
  }

  typedef uint8_t _result_type;
  uint8_t result;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  state;

  typedef std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  _info_type;
  std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  info;


  typedef boost::shared_ptr< ::vehicle_msgs::PathServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::PathServiceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PathServiceResponse
typedef  ::vehicle_msgs::PathServiceResponse_<std::allocator<void> > PathServiceResponse;

typedef boost::shared_ptr< ::vehicle_msgs::PathServiceResponse> PathServiceResponsePtr;
typedef boost::shared_ptr< ::vehicle_msgs::PathServiceResponse const> PathServiceResponseConstPtr;

struct PathService
{

typedef PathServiceRequest Request;
typedef PathServiceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PathService
} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::PathServiceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f666b75b68daaaa41781a63e511cefd4";
  }

  static const char* value(const  ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf666b75b68daaaa4ULL;
  static const uint64_t static_value2 = 0x1781a63e511cefd4ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/PathServiceRequest";
  }

  static const char* value(const  ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
Header header\n\
string command\n\
\n\
vehicle_msgs/FloatArray[] points\n\
diagnostic_msgs/KeyValue[] options\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: vehicle_msgs/FloatArray\n\
# vehicle_msgs/FloatArray.msg\n\
#\n\
#   generic float32 variable length array message\n\
#\n\
\n\
float32[] values    # vector\n\
\n\
================================================================================\n\
MSG: diagnostic_msgs/KeyValue\n\
string key # what to label this value when viewing\n\
string value # a value to track over time\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::PathServiceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::PathServiceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::PathServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5608204507793186f48780af6605c8fe";
  }

  static const char* value(const  ::vehicle_msgs::PathServiceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5608204507793186ULL;
  static const uint64_t static_value2 = 0xf48780af6605c8feULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::PathServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/PathServiceResponse";
  }

  static const char* value(const  ::vehicle_msgs::PathServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::PathServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool result\n\
string state\n\
diagnostic_msgs/KeyValue[] info\n\
\n\
\n\
================================================================================\n\
MSG: diagnostic_msgs/KeyValue\n\
string key # what to label this value when viewing\n\
string value # a value to track over time\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::PathServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::PathServiceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.command);
    stream.next(m.points);
    stream.next(m.options);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PathServiceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::PathServiceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.state);
    stream.next(m.info);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PathServiceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vehicle_msgs::PathService> {
  static const char* value() 
  {
    return "57aa6eaeac809eae48ff4819db69b4f3";
  }

  static const char* value(const vehicle_msgs::PathService&) { return value(); } 
};

template<>
struct DataType<vehicle_msgs::PathService> {
  static const char* value() 
  {
    return "vehicle_msgs/PathService";
  }

  static const char* value(const vehicle_msgs::PathService&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vehicle_msgs::PathServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57aa6eaeac809eae48ff4819db69b4f3";
  }

  static const char* value(const vehicle_msgs::PathServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vehicle_msgs::PathServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/PathService";
  }

  static const char* value(const vehicle_msgs::PathServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vehicle_msgs::PathServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57aa6eaeac809eae48ff4819db69b4f3";
  }

  static const char* value(const vehicle_msgs::PathServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vehicle_msgs::PathServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/PathService";
  }

  static const char* value(const vehicle_msgs::PathServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VEHICLE_MSGS_SERVICE_PATHSERVICE_H

