/* Auto-generated by genmsg_cpp for file /home/osl/src/nessie_highlander/vehicle_msgs/srv/StringService.srv */
#ifndef VEHICLE_MSGS_SERVICE_STRINGSERVICE_H
#define VEHICLE_MSGS_SERVICE_STRINGSERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vehicle_msgs
{
template <class ContainerAllocator>
struct StringServiceRequest_ {
  typedef StringServiceRequest_<ContainerAllocator> Type;

  StringServiceRequest_()
  : request()
  {
  }

  StringServiceRequest_(const ContainerAllocator& _alloc)
  : request(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _request_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  request;


  typedef boost::shared_ptr< ::vehicle_msgs::StringServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::StringServiceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StringServiceRequest
typedef  ::vehicle_msgs::StringServiceRequest_<std::allocator<void> > StringServiceRequest;

typedef boost::shared_ptr< ::vehicle_msgs::StringServiceRequest> StringServiceRequestPtr;
typedef boost::shared_ptr< ::vehicle_msgs::StringServiceRequest const> StringServiceRequestConstPtr;


template <class ContainerAllocator>
struct StringServiceResponse_ {
  typedef StringServiceResponse_<ContainerAllocator> Type;

  StringServiceResponse_()
  : result(false)
  , response()
  {
  }

  StringServiceResponse_(const ContainerAllocator& _alloc)
  : result(false)
  , response(_alloc)
  {
  }

  typedef uint8_t _result_type;
  uint8_t result;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _response_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  response;


  typedef boost::shared_ptr< ::vehicle_msgs::StringServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::StringServiceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StringServiceResponse
typedef  ::vehicle_msgs::StringServiceResponse_<std::allocator<void> > StringServiceResponse;

typedef boost::shared_ptr< ::vehicle_msgs::StringServiceResponse> StringServiceResponsePtr;
typedef boost::shared_ptr< ::vehicle_msgs::StringServiceResponse const> StringServiceResponseConstPtr;

struct StringService
{

typedef StringServiceRequest Request;
typedef StringServiceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StringService
} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::StringServiceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::StringServiceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::StringServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9b13f31f7a0a36901919f7ec0d9f40d4";
  }

  static const char* value(const  ::vehicle_msgs::StringServiceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9b13f31f7a0a3690ULL;
  static const uint64_t static_value2 = 0x1919f7ec0d9f40d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::StringServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/StringServiceRequest";
  }

  static const char* value(const  ::vehicle_msgs::StringServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::StringServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
string request\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::StringServiceRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::StringServiceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::StringServiceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::StringServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d7f0b5cefb282a9beeb785845e0869f6";
  }

  static const char* value(const  ::vehicle_msgs::StringServiceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd7f0b5cefb282a9bULL;
  static const uint64_t static_value2 = 0xeeb785845e0869f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::StringServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/StringServiceResponse";
  }

  static const char* value(const  ::vehicle_msgs::StringServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::StringServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool result\n\
string response\n\
\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::StringServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::StringServiceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.request);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StringServiceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::StringServiceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.response);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StringServiceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vehicle_msgs::StringService> {
  static const char* value() 
  {
    return "d642d3232d67ad0a604622f3a91be6b4";
  }

  static const char* value(const vehicle_msgs::StringService&) { return value(); } 
};

template<>
struct DataType<vehicle_msgs::StringService> {
  static const char* value() 
  {
    return "vehicle_msgs/StringService";
  }

  static const char* value(const vehicle_msgs::StringService&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vehicle_msgs::StringServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d642d3232d67ad0a604622f3a91be6b4";
  }

  static const char* value(const vehicle_msgs::StringServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vehicle_msgs::StringServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/StringService";
  }

  static const char* value(const vehicle_msgs::StringServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vehicle_msgs::StringServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d642d3232d67ad0a604622f3a91be6b4";
  }

  static const char* value(const vehicle_msgs::StringServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vehicle_msgs::StringServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/StringService";
  }

  static const char* value(const vehicle_msgs::StringServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VEHICLE_MSGS_SERVICE_STRINGSERVICE_H

