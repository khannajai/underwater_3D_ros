/* Auto-generated by genmsg_cpp for file /home/osl/src/nessie_highlander/vehicle_msgs/msg/ThrusterFeedback.msg */
#ifndef VEHICLE_MSGS_MESSAGE_THRUSTERFEEDBACK_H
#define VEHICLE_MSGS_MESSAGE_THRUSTERFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace vehicle_msgs
{
template <class ContainerAllocator>
struct ThrusterFeedback_ {
  typedef ThrusterFeedback_<ContainerAllocator> Type;

  ThrusterFeedback_()
  : header()
  , throttle()
  , current()
  , temp()
  , status()
  , errors()
  {
    throttle.assign(0);
    current.assign(0.0);
    temp.assign(0);
    status.assign(0);
    errors.assign(0);
  }

  ThrusterFeedback_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , throttle()
  , current()
  , temp()
  , status()
  , errors()
  {
    throttle.assign(0);
    current.assign(0.0);
    temp.assign(0);
    status.assign(0);
    errors.assign(0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef boost::array<int32_t, 6>  _throttle_type;
  boost::array<int32_t, 6>  throttle;

  typedef boost::array<float, 6>  _current_type;
  boost::array<float, 6>  current;

  typedef boost::array<int32_t, 6>  _temp_type;
  boost::array<int32_t, 6>  temp;

  typedef boost::array<int32_t, 6>  _status_type;
  boost::array<int32_t, 6>  status;

  typedef boost::array<int32_t, 6>  _errors_type;
  boost::array<int32_t, 6>  errors;


  typedef boost::shared_ptr< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ThrusterFeedback
typedef  ::vehicle_msgs::ThrusterFeedback_<std::allocator<void> > ThrusterFeedback;

typedef boost::shared_ptr< ::vehicle_msgs::ThrusterFeedback> ThrusterFeedbackPtr;
typedef boost::shared_ptr< ::vehicle_msgs::ThrusterFeedback const> ThrusterFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "da991891c14c1b46b11dd3c98f7b9179";
  }

  static const char* value(const  ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xda991891c14c1b46ULL;
  static const uint64_t static_value2 = 0xb11dd3c98f7b9179ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/ThrusterFeedback";
  }

  static const char* value(const  ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# vehicle_msgs/ThrusterFeedback.msg\n\
\n\
Header header          # message header\n\
\n\
int32[6] throttle      # thrusters throttle feedback (normalized between -100 and 100)\n\
float32[6] current     # thrusters internal current feedback\n\
\n\
int32[6] temp          # thrusters temperature feedback (integer precision)\n\
int32[6] status        # thrusters internal status feedback (bitfields)\n\
int32[6] errors        # thrusters communication errors' count\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.throttle);
    stream.next(m.current);
    stream.next(m.temp);
    stream.next(m.status);
    stream.next(m.errors);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ThrusterFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vehicle_msgs::ThrusterFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "throttle[]" << std::endl;
    for (size_t i = 0; i < v.throttle.size(); ++i)
    {
      s << indent << "  throttle[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.throttle[i]);
    }
    s << indent << "current[]" << std::endl;
    for (size_t i = 0; i < v.current.size(); ++i)
    {
      s << indent << "  current[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.current[i]);
    }
    s << indent << "temp[]" << std::endl;
    for (size_t i = 0; i < v.temp.size(); ++i)
    {
      s << indent << "  temp[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.temp[i]);
    }
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.status[i]);
    }
    s << indent << "errors[]" << std::endl;
    for (size_t i = 0; i < v.errors.size(); ++i)
    {
      s << indent << "  errors[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.errors[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_THRUSTERFEEDBACK_H

