/* Auto-generated by genmsg_cpp for file /home/osl/src/nessie_highlander/vehicle_msgs/msg/NodeStatus.msg */
#ifndef VEHICLE_MSGS_MESSAGE_NODESTATUS_H
#define VEHICLE_MSGS_MESSAGE_NODESTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "diagnostic_msgs/KeyValue.h"

namespace vehicle_msgs
{
template <class ContainerAllocator>
struct NodeStatus_ {
  typedef NodeStatus_<ContainerAllocator> Type;

  NodeStatus_()
  : header()
  , status(0)
  , node()
  , message()
  , info()
  {
  }

  NodeStatus_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , status(0)
  , node(_alloc)
  , message(_alloc)
  , info(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _status_type;
  int32_t status;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  node;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  message;

  typedef std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  _info_type;
  std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  info;

  enum { DEBUG = -1 };
  enum { INFO = 0 };
  enum { WARN = 1 };
  enum { ERROR = 2 };
  enum { FATAL = 4 };

  typedef boost::shared_ptr< ::vehicle_msgs::NodeStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::NodeStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NodeStatus
typedef  ::vehicle_msgs::NodeStatus_<std::allocator<void> > NodeStatus;

typedef boost::shared_ptr< ::vehicle_msgs::NodeStatus> NodeStatusPtr;
typedef boost::shared_ptr< ::vehicle_msgs::NodeStatus const> NodeStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vehicle_msgs::NodeStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vehicle_msgs::NodeStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::NodeStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::NodeStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::NodeStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dba841142621b56d7919c7f4b213484c";
  }

  static const char* value(const  ::vehicle_msgs::NodeStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdba841142621b56dULL;
  static const uint64_t static_value2 = 0x7919c7f4b213484cULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::NodeStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/NodeStatus";
  }

  static const char* value(const  ::vehicle_msgs::NodeStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::NodeStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# vehicle_msgs/NodeStatus.msg\n\
#   general message for communicate state info of a generic node (like failures or new configurations)\n\
\n\
# tentative list of generic states\n\
#   can be seen as a primitive priority system (for diagnostic and failures notifications)\n\
int32 DEBUG=-1\n\
int32 INFO=0\n\
int32 WARN=1\n\
int32 ERROR=2\n\
int32 FATAL=4\n\
\n\
Header header                               # message header\n\
\n\
int32 status                                # generic status as number\n\
string node                                 # name of the publisher node\n\
string message                              # optional broadcast message\n\
\n\
diagnostic_msgs/KeyValue[] info             # optional data dictionary (here are the info about the notification)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: diagnostic_msgs/KeyValue\n\
string key # what to label this value when viewing\n\
string value # a value to track over time\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::NodeStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::vehicle_msgs::NodeStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::vehicle_msgs::NodeStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::NodeStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.status);
    stream.next(m.node);
    stream.next(m.message);
    stream.next(m.info);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NodeStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::NodeStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vehicle_msgs::NodeStatus_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "info[]" << std::endl;
    for (size_t i = 0; i < v.info.size(); ++i)
    {
      s << indent << "  info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.info[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_NODESTATUS_H

