/* Auto-generated by genmsg_cpp for file /home/osl/src/nessie_highlander/vehicle_msgs/msg/PilotRequest.msg */
#ifndef VEHICLE_MSGS_MESSAGE_PILOTREQUEST_H
#define VEHICLE_MSGS_MESSAGE_PILOTREQUEST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace vehicle_msgs
{
template <class ContainerAllocator>
struct PilotRequest_ {
  typedef PilotRequest_<ContainerAllocator> Type;

  PilotRequest_()
  : header()
  , priority(0)
  , position()
  , velocity()
  , limit_velocity()
  , disable_axis()
  {
    position.assign(0.0);
    velocity.assign(0.0);
    limit_velocity.assign(0);
    disable_axis.assign(0);
  }

  PilotRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , priority(0)
  , position()
  , velocity()
  , limit_velocity()
  , disable_axis()
  {
    position.assign(0.0);
    velocity.assign(0.0);
    limit_velocity.assign(0);
    disable_axis.assign(0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int8_t _priority_type;
  int8_t priority;

  typedef boost::array<float, 6>  _position_type;
  boost::array<float, 6>  position;

  typedef boost::array<float, 6>  _velocity_type;
  boost::array<float, 6>  velocity;

  typedef boost::array<uint16_t, 6>  _limit_velocity_type;
  boost::array<uint16_t, 6>  limit_velocity;

  typedef boost::array<uint16_t, 6>  _disable_axis_type;
  boost::array<uint16_t, 6>  disable_axis;

  enum { MIN = -128 };
  enum { LOW = -64 };
  enum { NORMAL = 0 };
  enum { HIGH = 64 };
  enum { MAX = 127 };

  typedef boost::shared_ptr< ::vehicle_msgs::PilotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::PilotRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PilotRequest
typedef  ::vehicle_msgs::PilotRequest_<std::allocator<void> > PilotRequest;

typedef boost::shared_ptr< ::vehicle_msgs::PilotRequest> PilotRequestPtr;
typedef boost::shared_ptr< ::vehicle_msgs::PilotRequest const> PilotRequestConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vehicle_msgs::PilotRequest_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vehicle_msgs::PilotRequest_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::PilotRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vehicle_msgs::PilotRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::PilotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1a6a82401ad4d01a163d834e114bb63f";
  }

  static const char* value(const  ::vehicle_msgs::PilotRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1a6a82401ad4d01aULL;
  static const uint64_t static_value2 = 0x163d834e114bb63fULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::PilotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vehicle_msgs/PilotRequest";
  }

  static const char* value(const  ::vehicle_msgs::PilotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::PilotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# vehicle_msgs/PilotRequest.msg\n\
#   this message represent the generic pilot request with different modes consumed by the vehicle pilot\n\
\n\
# list of priorities\n\
int8 MIN=-128\n\
int8 LOW=-64\n\
int8 NORMAL=0\n\
int8 HIGH=64\n\
int8 MAX=127\n\
\n\
Header header                      # keep track of time\n\
int8 priority                      # specify the weight of the request\n\
\n\
float32[6] position                # requested position\n\
float32[6] velocity                # requested velocity\n\
\n\
# optional parameters\n\
#   these values are used in special cases and for specific function only\n\
#   please be considerate in using this features and if unsure avoid them\n\
#\n\
#   using uint16 because uint8 is used as string type in rqt tools\n\
#\n\
uint16[6] limit_velocity           # if non-zero will enable speed limit on each DOF using velocity parameter (only position requests)\n\
uint16[6] disable_axis             # if non-zero will disable on each DOF (used for all requests)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::vehicle_msgs::PilotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::vehicle_msgs::PilotRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::vehicle_msgs::PilotRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::PilotRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.priority);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.limit_velocity);
    stream.next(m.disable_axis);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PilotRequest_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::PilotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vehicle_msgs::PilotRequest_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "priority: ";
    Printer<int8_t>::stream(s, indent + "  ", v.priority);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "limit_velocity[]" << std::endl;
    for (size_t i = 0; i < v.limit_velocity.size(); ++i)
    {
      s << indent << "  limit_velocity[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.limit_velocity[i]);
    }
    s << indent << "disable_axis[]" << std::endl;
    for (size_t i = 0; i < v.disable_axis.size(); ++i)
    {
      s << indent << "  disable_axis[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.disable_axis[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_PILOTREQUEST_H

